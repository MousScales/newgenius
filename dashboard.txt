<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Genius - Dashboard</title>
    <link rel="icon" type="image/x-icon" href="/favicon.ico">
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
    <link rel="apple-touch-icon" sizes="192x192" href="/icon-192.png">
    <link rel="apple-touch-icon" sizes="512x512" href="/icon-512.png">
    <link rel="stylesheet" href="styles.css">
    <!-- Vercel Analytics -->
    <script>
        window.va = window.va || function () { (window.vaq = window.vaq || []).push(arguments); };
    </script>
    <script>
        // Only load Vercel Analytics on Vercel deployment
        if (window.location.hostname.includes('vercel.app') || window.location.hostname.includes('vercel.com') || window.location.hostname.includes('genius-site.com')) {
            const script = document.createElement('script');
            script.src = '/_vercel/insights/script.js';
            script.defer = true;
            document.head.appendChild(script);
        }
    </script>
    <!-- Firebase SDK -->
    <script src="https://www.gstatic.com/firebasejs/10.7.1/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/10.7.1/firebase-auth-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/10.7.1/firebase-firestore-compat.js"></script>
    <!-- jsPDF for PDF generation -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
</head>
<body>
    <div class="app-container">
        <!-- Sidebar Navigation -->
        <aside class="sidebar" id="sidebar">
            <div class="sidebar-header">
                <img src="assets/darkgenius.png" alt="Genius" class="sidebar-logo">
                <h2 class="sidebar-title">Genius</h2>
            </div>
            <nav class="sidebar-nav">
                <a href="#" class="nav-item active">
                    <span class="nav-icon">üè†</span>
                    <span class="nav-text">Dashboard</span>
                </a>
                <a href="#" class="nav-item" id="chatWithGenius">
                    <span class="nav-icon genius-icon"></span>
                    <span class="nav-text">Chat with Genius</span>
                    <span class="nav-shortcut">‚åò/</span>
                </a>
                <a href="#" class="nav-item" id="calculatorNav">
                    <span class="nav-icon">üì±</span>
                    <span class="nav-text">Calculator</span>
                    <span class="nav-shortcut">‚åòC</span>
                </a>
                <!-- More nav items can be added here later -->
            </nav>
        </aside>

        <!-- Main Content Area -->
        <div class="main-wrapper screen-container">
            <div class="header-bar">
                <button class="menu-toggle" id="menuToggle">
                    <span class="menu-icon">‚ò∞</span>
                </button>
                <div class="header-spacer"></div>
                <div class="profile-menu">
                    <button id="profileBtn" class="profile-btn">
                        <span class="profile-icon">üë§</span>
                        <span id="profileName">Profile</span>
                        <span class="dropdown-arrow">‚ñº</span>
                    </button>
                    <div class="profile-dropdown" id="profileDropdown">
                        <div class="profile-info">
                            <h3 id="dropdownName">User</h3>
                            <p id="dropdownEmail">email@example.com</p>
                            <p id="dropdownCollege">College</p>
                            <p id="dropdownMajor">Major</p>
                        </div>
                        <div class="profile-divider"></div>
                        <button id="settingsBtn" class="dropdown-item">
                            <span>‚öôÔ∏è</span> Settings
                        </button>
                        <button id="logoutBtn" class="dropdown-item">
                            <span>üö™</span> Logout
                        </button>
                    </div>
                </div>
            </div>
            <button class="add-class-btn" id="addClassBtn">
                <span>+</span> Add Class
            </button>
            <div class="dashboard-content">
                <div class="loading-state" id="loadingState">
                    <!-- Clean loading state - just background -->
                </div>
                <div class="classes-grid" id="classesGrid">
                    <!-- Classes will be dynamically added here -->
                </div>
                <div class="empty-state" id="emptyState">
                    <button class="big-plus-button" id="emptyAddButton">+</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Settings Modal -->
    <div id="settingsModal" class="settings-modal">
        <div class="settings-modal-content">
            <div class="settings-header">
                <h2>Settings</h2>
                <button id="closeSettingsBtn" class="close-settings-btn">√ó</button>
            </div>
            <div class="settings-body">
                <div class="settings-section">
                    <h3>Subscription</h3>
                    <p class="settings-description">Manage your Genius subscription and billing.</p>
                    <div class="subscription-info">
                        <div class="subscription-status">
                            <span class="status-label">Current Plan:</span>
                            <span class="status-value" id="currentPlan">Free Plan</span>
                        </div>
                        <button id="manageSubscriptionBtn" class="settings-action-btn" disabled>
                            <span>üí≥</span> Manage Subscription
                            <span class="coming-soon-badge">Coming Soon</span>
                        </button>
                    </div>
                </div>

                <div class="settings-section">
                    <h3>Academic Information</h3>
                    <p class="settings-description">Update your school and major information.</p>
                    <div class="input-group">
                        <label for="schoolName" class="settings-label">School/University</label>
                        <input type="text" id="schoolName" placeholder="Enter your school name" class="settings-input">
                    </div>
                    <div class="input-group">
                        <label for="majorField" class="settings-label">Major/Field of Study</label>
                        <input type="text" id="majorField" placeholder="Enter your major" class="settings-input">
                    </div>
                </div>

                <!-- <div class="settings-section">
                    <h3>OpenAI API Key</h3>
                    <p class="settings-description">Add your OpenAI API key to use the Chat with Genius feature.</p>
                    <div class="input-group">
                        <input type="password" id="openaiApiKey" placeholder="Enter your OpenAI API key" class="settings-input">
                        <button id="toggleApiKey" class="toggle-visibility-btn" title="Toggle visibility">üëÅÔ∏è</button>
                    </div>
                    <p class="settings-help">
                        <a href="https://platform.openai.com/api-keys" target="_blank" class="help-link">
                            Get your API key from OpenAI Platform
                        </a>
                    </p>
                </div> -->
            </div>
            <div class="settings-footer">
                <button id="saveSettingsBtn" class="save-settings-btn">Save Settings</button>
            </div>
        </div>
    </div>

    <script>
        // Wait for Firebase to initialize
        let auth, signOut, onAuthStateChanged;
        
        async function initDashboard() {
            try {
                console.log('Waiting for Firebase to load...');
                
                // Wait for Firebase to be available
                while (!window.firebase) {
                    await new Promise(resolve => setTimeout(resolve, 100));
                }
                
                // Initialize Firebase
                const firebaseConfig = {
                    apiKey: "AIzaSyB-JPtkbuIES5T_m7nkX0Ic1iO_lz0FbTk",
                    authDomain: "genius-b5656.firebaseapp.com",
                    projectId: "genius-b5656",
                    storageBucket: "genius-b5656.firebasestorage.app",
                    messagingSenderId: "567988128391",
                    appId: "1:567988128391:web:8a48294d736ec4013f8622",
                    measurementId: "G-3SEG2XJQMP"
                };
                
                // Initialize Firebase
                window.firebase.initializeApp(firebaseConfig);
                auth = window.firebase.auth();
                signOut = window.firebase.auth().signOut;
                onAuthStateChanged = window.firebase.auth().onAuthStateChanged;
                
                console.log('Firebase initialized successfully');
                
            } catch (error) {
                console.error('Error initializing Firebase:', error);
                alert('Failed to load Firebase. Please refresh the page.');
            }
        }

        console.log('Dashboard loaded');

        let currentUser = null;

        // Check authentication state
        function checkAuthState() {
            if (window.firebase && window.firebase.auth) {
                window.firebase.auth().onAuthStateChanged((user) => {
                    if (user) {
                        console.log('User authenticated:', user.uid);
                        currentUser = {
                            uid: user.uid,
                            email: user.email,
                            displayName: user.displayName,
                            photoURL: user.photoURL
                        };
                        
                        // Initialize dashboard after user is set
                        setTimeout(() => {
                            initializeDashboard();
                        }, 100);
                    } else {
                        console.log('No user authenticated, redirecting to login');
                        // Redirect to login
                        window.location.href = 'login.html';
                    }
                });
            } else {
                console.log('Firebase auth not available, redirecting to login');
                window.location.href = 'login.html';
            }
        }

        // Initialize dashboard when page loads
        document.addEventListener('DOMContentLoaded', async () => {
            // Load class modules first
            const modulesLoaded = await loadClassModules();
            if (!modulesLoaded) {
                console.error('Failed to load class modules');
                return;
            }
            
            initDashboard().then(() => {
                // Check Firebase authentication state
                checkAuthState();
            });
        });

        function initializeDashboard() {
            // Load user profile from Firestore
            loadProfileInfo();
            
            // Load classes after user is authenticated
            loadClasses();

        // Sidebar toggle functionality
        const sidebar = document.getElementById('sidebar');
        const menuToggle = document.getElementById('menuToggle');

        // Check saved sidebar state
        const sidebarCollapsed = localStorage.getItem('sidebarCollapsed') === 'true';
        if (sidebarCollapsed) {
            sidebar.classList.add('collapsed');
            const mainWrapper = document.querySelector('.main-wrapper');
            if (mainWrapper) {
                mainWrapper.classList.add('sidebar-collapsed');
            }
        }

        // Toggle sidebar from hamburger menu button
        menuToggle.addEventListener('click', () => {
            sidebar.classList.toggle('collapsed');
            const isCollapsed = sidebar.classList.contains('collapsed');
            localStorage.setItem('sidebarCollapsed', isCollapsed);
            
            // Also toggle the main wrapper class
            const mainWrapper = document.querySelector('.main-wrapper');
            if (mainWrapper) {
                if (isCollapsed) {
                    mainWrapper.classList.add('sidebar-collapsed');
                } else {
                    mainWrapper.classList.remove('sidebar-collapsed');
                }
            }
        });

        // Load profile info from Firestore
        async function loadProfileInfo() {
            if (!currentUser || !currentUser.uid) {
                console.log('No current user available for profile loading');
                return;
            }
            
            let profile = {};
            
            try {
                const db = window.firebase.firestore();
                const userRef = db.collection('users').doc(currentUser.uid);
                const userDoc = await userRef.get();
                
                if (userDoc.exists) {
                    profile = userDoc.data();
                    console.log('Loaded profile from Firestore:', profile);
                } else {
                    console.log('No profile found in Firestore for user:', currentUser.uid);
                    // Create a basic profile if none exists
                    profile = {
                        name: currentUser.displayName || 'User',
                        email: currentUser.email,
                        collegeName: 'No college set',
                        major: 'No major set',
                        academicLevel: 'Not specified',
                        createdAt: new Date(),
                        updatedAt: new Date()
                    };
                    
                    // Save the basic profile to Firestore
                    await userRef.set(profile);
                    console.log('Created basic profile in Firestore:', profile);
                }
            } catch (error) {
                console.error('Error loading profile from Firestore:', error);
                // Create a basic profile as fallback
                profile = {
                    name: currentUser.displayName || 'User',
                    email: currentUser.email,
                    collegeName: 'No college set',
                    major: 'No major set',
                    academicLevel: 'Not specified'
                };
            }
            
            // Update profile button with first name
            if (profile && profile.name) {
                const firstName = profile.name.split(' ')[0];
                const profileNameElement = document.getElementById('profileName');
                if (profileNameElement) {
                    profileNameElement.textContent = firstName;
                }
            }
            
            // Update dropdown info with Firestore data
            const dropdownName = document.getElementById('dropdownName');
            const dropdownEmail = document.getElementById('dropdownEmail');
            const dropdownCollege = document.getElementById('dropdownCollege');
            const dropdownMajor = document.getElementById('dropdownMajor');
            
            if (dropdownName) {
                dropdownName.textContent = (profile && profile.name) || 'User';
            }
            if (dropdownEmail) {
                dropdownEmail.textContent = (profile && profile.email) || (currentUser && currentUser.email) || 'No email';
            }
            if (dropdownCollege) {
                dropdownCollege.textContent = (profile && profile.collegeName) || 'No college set';
            }
            if (dropdownMajor) {
                dropdownMajor.textContent = (profile && profile.major) || 'No major set';
            }
            
            console.log('Profile dropdown updated with:', {
                name: profile.name,
                email: profile.email,
                college: profile.collegeName,
                major: profile.major
            });
        }

        // Profile dropdown toggle
        const profileBtn = document.getElementById('profileBtn');
        const profileDropdown = document.getElementById('profileDropdown');
        
        profileBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            profileDropdown.classList.toggle('show');
        });

        // Close dropdown when clicking outside
        document.addEventListener('click', () => {
            profileDropdown.classList.remove('show');
        });

        // Settings button
        document.getElementById('settingsBtn').addEventListener('click', () => {
            openSettingsModal();
        });

        // Logout button
        document.getElementById('logoutBtn').addEventListener('click', async () => {
            try {
                console.log('Logging out user...');
                
                // Sign out from Firebase
                await signOut(auth);
                
                // Clear all user data from localStorage
                localStorage.removeItem('currentUser');
                localStorage.removeItem('userData');
                localStorage.removeItem('genius_chats');
                
                // Clear any user-specific data
                const keysToRemove = [];
                for (let i = 0; i < localStorage.length; i++) {
                    const key = localStorage.key(i);
                    if (key && (key.includes('classes_') || key.includes('profile_') || key.includes('genius_'))) {
                        keysToRemove.push(key);
                    }
                }
                keysToRemove.forEach(key => localStorage.removeItem(key));
                
                console.log('User logged out successfully, redirecting to login...');
                
                // Redirect to login page
                window.location.href = 'login.html';
            } catch (error) {
                console.error('Logout error:', error);
                // Even if there's an error, still redirect to login
                window.location.href = 'login.html';
            }
        });

        // Settings modal functionality
        function openSettingsModal() {
            const modal = document.getElementById('settingsModal');
            modal.style.display = 'flex';
            
            // Load current user data
            const currentUserData = localStorage.getItem('currentUser');
            if (currentUserData) {
                const currentUser = JSON.parse(currentUserData);
                // document.getElementById('openaiApiKey').value = currentUser.openaiApiKey || ''; // COMMENTED OUT
                // Use collegeName instead of school to match the profile structure
                document.getElementById('schoolName').value = currentUser.collegeName || currentUser.school || '';
                document.getElementById('majorField').value = currentUser.major || '';
            }
            
            // Load academic info from profile if available
            loadAcademicInfo();
            
            // Trigger smooth transition
            setTimeout(() => {
                modal.classList.add('show');
            }, 10);
        }

        function closeSettingsModal() {
            const modal = document.getElementById('settingsModal');
            modal.classList.remove('show');
            
            // Wait for transition to complete before hiding
            setTimeout(() => {
                modal.style.display = 'none';
            }, 300);
        }

        // Load academic information from profile
        async function loadAcademicInfo() {
            try {
                const currentUserData = localStorage.getItem('currentUser');
                if (!currentUserData) return;

                const currentUser = JSON.parse(currentUserData);
                const db = window.firebase.firestore();
                const userDoc = await db.collection('users').doc(currentUser.uid).get();
                
                if (userDoc.exists) {
                    const userData = userDoc.data();
                    // Use collegeName instead of school to match the profile structure
                    document.getElementById('schoolName').value = userData.collegeName || userData.school || '';
                    document.getElementById('majorField').value = userData.major || '';
                }
            } catch (error) {
                console.error('Error loading academic info:', error);
            }
        }

        // Settings modal event listeners
        document.getElementById('closeSettingsBtn').addEventListener('click', closeSettingsModal);
        
        // Close modal when clicking outside
        document.getElementById('settingsModal').addEventListener('click', (e) => {
            if (e.target.id === 'settingsModal') {
                closeSettingsModal();
            }
        });

        // Toggle API key visibility - COMMENTED OUT
        // document.getElementById('toggleApiKey').addEventListener('click', () => {
        //     const input = document.getElementById('openaiApiKey');
        //     const button = document.getElementById('toggleApiKey');
        //     
        //     if (input.type === 'password') {
        //         input.type = 'text';
        //         button.textContent = 'üôà';
        //     } else {
        //         input.type = 'password';
        //         button.textContent = 'üëÅÔ∏è';
        //     }
        // });

        // Manage subscription button (coming soon)
        document.getElementById('manageSubscriptionBtn').addEventListener('click', () => {
            alert('Subscription management is coming soon! Stay tuned for updates.');
        });


        // Save settings
        document.getElementById('saveSettingsBtn').addEventListener('click', async () => {
            // Get academic information
            const schoolName = document.getElementById('schoolName').value.trim();
            const majorField = document.getElementById('majorField').value.trim();
            
            if (!schoolName && !majorField) {
                alert('Please enter at least your school or major information.');
                return;
            }

            try {
                const currentUserData = localStorage.getItem('currentUser');
                if (!currentUserData) {
                    alert('User not found. Please log in again.');
                    return;
                }

                const currentUser = JSON.parse(currentUserData);
                    const db = window.firebase.firestore();
                
                // Update Firebase profile with academic info
                    await db.collection('users').doc(currentUser.uid).set({
                    collegeName: schoolName,
                    school: schoolName, // Keep both for compatibility
                    major: majorField,
                        updatedAt: new Date()
                    }, { merge: true });
                    
                // Update localStorage
                currentUser.collegeName = schoolName;
                currentUser.school = schoolName; // Keep both for compatibility
                currentUser.major = majorField;
                localStorage.setItem('currentUser', JSON.stringify(currentUser));

                // Update profile display
                loadProfileInfo();
                
                console.log('Settings saved successfully');
                    closeSettingsModal();
                    
                    // Show success message
                alert('Settings saved successfully!');
            } catch (error) {
                console.error('Error saving settings:', error);
                alert('Error saving settings. Please try again.');
            }
        });

        // Show header buttons after loading is complete
        function showHeaderButtons() {
            const addClassBtn = document.getElementById('addClassBtn');
            const profileBtn = document.getElementById('profileBtn');
            
            if (addClassBtn) {
                addClassBtn.style.display = 'flex';
            }
            if (profileBtn) {
                profileBtn.style.display = 'flex';
            }
            
            console.log('Header buttons shown after loading complete');
        }

        // Load and display classes
        async function loadClasses() {
            if (!currentUser || !currentUser.uid) {
                console.log('No current user available for class loading');
                return;
            }
            
            console.log('üîÑ Loading classes from Firebase for user:', currentUser.uid);

            // Show loading state
            const loadingState = document.getElementById('loadingState');
            const classesGrid = document.getElementById('classesGrid');
            const emptyState = document.getElementById('emptyState');
            const addClassBtn = document.getElementById('addClassBtn');
            const profileBtn = document.getElementById('profileBtn');
            
            loadingState.style.display = 'flex';
            classesGrid.style.display = 'none';
            emptyState.style.display = 'none';
            addClassBtn.style.display = 'none';
            if (profileBtn) profileBtn.style.display = 'none';

            // Wait for class modules to be loaded
            if (typeof window.showClassView !== 'function') {
                console.log('Class modules not loaded yet, waiting...');
                await new Promise(resolve => {
                    const checkModules = () => {
                        if (typeof window.showClassView === 'function') {
                            resolve();
                        } else {
                            setTimeout(checkModules, 100);
                        }
                    };
                    checkModules();
                });
            }
            
            let classes = [];
            
            // Load classes from Firebase
            try {
                console.log('üì° Connecting to Firebase Firestore...');
                const db = window.firebase.firestore();
                const classesRef = db.collection('users').doc(currentUser.uid).collection('classes');
                console.log('üìö Querying classes collection...');
                const querySnapshot = await classesRef.orderBy('createdAt', 'desc').get();
                classes = [];
                querySnapshot.forEach((doc) => {
                    const classData = {
                        id: doc.id,
                        ...doc.data()
                    };
                    classes.push(classData);
                    console.log('üìñ Loaded class:', classData.name, 'ID:', classData.id);
                });
                console.log('‚úÖ Successfully loaded', classes.length, 'classes from Firebase');
            } catch (error) {
                console.error('‚ùå Error loading classes from Firebase:', error);
                console.error('Error details:', error.code, error.message);
                alert('Error loading classes. Please refresh the page and try again.');
                classes = [];
            }
            
            // Hide loading state and show appropriate content
            loadingState.style.display = 'none';
            
            // Show buttons after loading is complete
            showHeaderButtons();
            
            if (classes.length === 0) {
                emptyState.style.display = 'flex';
                classesGrid.style.display = 'none';
                addClassBtn.style.display = 'none';
            } else {
                emptyState.style.display = 'none';
                classesGrid.style.display = 'grid';
                addClassBtn.style.display = 'flex';
                classesGrid.innerHTML = classes.map((classData, index) => {
                    const className = classData.name || 'Untitled';
                    const titleClass = className.length > 40 ? 'very-long-title' : 
                                     className.length > 20 ? 'long-title' : '';
                    
                    // Generate subject icon and image based on class name
                    const getSubjectIcon = (name) => {
                        const lowerName = name.toLowerCase();
                        if (lowerName.includes('math') || lowerName.includes('calculus') || lowerName.includes('algebra') || lowerName.includes('calc')) return 'math.jpg';
                        if (lowerName.includes('physics') || lowerName.includes('mechanics') || lowerName.includes('thermodynamics')) return 'physics.jpg';
                        if (lowerName.includes('chemistry') || lowerName.includes('organic') || lowerName.includes('biochem')) return 'chemistry.jpg';
                        if (lowerName.includes('english') || lowerName.includes('literature') || lowerName.includes('writing')) return 'üìö';
                        if (lowerName.includes('history') || lowerName.includes('social')) return 'üèõÔ∏è';
                        if (lowerName.includes('art') || lowerName.includes('design')) return 'üé®';
                        if (lowerName.includes('computer') || lowerName.includes('programming') || lowerName.includes('coding')) return 'üíª';
                        if (lowerName.includes('language') || lowerName.includes('spanish') || lowerName.includes('french')) return 'üåç';
                        if (lowerName.includes('music')) return 'üéµ';
                        if (lowerName.includes('business') || lowerName.includes('economics')) return 'üíº';
                        return 'üìñ';
                    };
                    
                    const subjectIcon = getSubjectIcon(className);
                    
                    // Generate image content with better styling
                    let imageContent;
                    if (classData.imageUrl) {
                        imageContent = `<img src="${classData.imageUrl}" alt="${classData.name}" style="width: 100%; height: 100%; object-fit: cover; border-radius: 8px;">`;
                    } else if (subjectIcon && (subjectIcon.includes('.jpg') || subjectIcon.includes('.png') || subjectIcon.includes('.webp'))) {
                        // Use the subject-specific image
                        imageContent = `<img src="${subjectIcon}" alt="${classData.name}" style="width: 100%; height: 100%; object-fit: cover; border-radius: 8px;">`;
                    } else if (classData.name && classData.name.trim()) {
                        const initial = classData.name.trim()[0].toUpperCase();
                        imageContent = `<div class="class-initial">${initial}</div>`;
                    } else {
                        imageContent = '<div class="class-initial">?</div>';
                    }
                    
                    return `
                        <div class="class-card" data-class-index="${index}">
                            <div class="class-card-image">
                                ${imageContent}
                            </div>
                            <div class="class-card-content">
                                <div class="class-card-header">
                                    <h3 class="class-card-title ${titleClass}">${className}</h3>
                                    <div class="class-menu-container">
                                        <button class="class-menu-btn" onclick="toggleClassMenu(event, ${index})">
                                            <span class="menu-dots">‚ãØ</span>
                                        </button>
                                        <div class="class-menu-dropdown" id="class-menu-${index}">
                                            <button class="menu-item edit-class" onclick="editClass(${index})">
                                                <span class="menu-icon">‚úèÔ∏è</span>
                                                Edit
                                            </button>
                                            <button class="menu-item delete-class" onclick="deleteClass(${index})">
                                                <span class="menu-icon">üóëÔ∏è</span>
                                                Delete
                                            </button>
                                        </div>
                                    </div>
                                </div>
                                ${classData.instructor ? 
                                    `<p class="class-card-instructor">${classData.instructor}</p>` : 
                                    ''}
                                <div class="class-card-meta">
                                    ${classData.term ? `<span class="meta-tag term">${classData.term} ${classData.year || ''}</span>` : ''}
                                    ${classData.level ? `<span class="meta-tag level">${classData.level}</span>` : ''}
                                    ${classData.days && classData.days.length > 0 ? 
                                        `<span class="meta-tag schedule">${classData.days.map(d => d.day.slice(0, 3) + '.').join(', ')}</span>` : 
                                        ''}
                                </div>
                            </div>
                        </div>
                    `;
                }).join('');
                
                // Add click handlers to class cards
                setTimeout(() => {
                    const classCards = document.querySelectorAll('.class-card');
                    classCards.forEach(card => {
                        card.addEventListener('click', (e) => {
                            // Don't open class if clicking on menu
                            if (e.target.closest('.class-menu-container')) {
                                return;
                            }
                            
                            const classIndex = parseInt(card.dataset.classIndex);
                            const selectedClass = classes[classIndex];
                            
                            // showClassView should be available since we waited for modules
                            if (typeof window.showClassView === 'function') {
                                window.showClassView(selectedClass);
                            } else {
                                console.error('showClassView function still not available');
                            }
                        });
                    });
                    
                    // Load stats for each class
                    loadClassStats(classes);
                }, 100);
            }
        }

        // Load class statistics
        async function loadClassStats(classes) {
            if (!currentUser || !currentUser.uid) {
                console.log('No current user available for class stats loading');
                return;
            }
            
            // Counters removed - no longer loading document, study guide, and flashcard counts
        }

        // Load classes is now called in initializeDashboard() after authentication

        // Add class button (top right)
        document.getElementById('addClassBtn').addEventListener('click', () => {
            console.log('Add class button clicked!');
            addClass();
        });

        // Empty state add button (center)
        const emptyAddButton = document.getElementById('emptyAddButton');
        if (emptyAddButton) {
            emptyAddButton.addEventListener('click', () => {
                console.log('Empty add button clicked!');
                addClass();
            });
        }

        // Listen for class creation
        window.addEventListener('classCreated', () => {
            loadClasses();
        });

        // Chat with Genius functionality
        document.getElementById('chatWithGenius').addEventListener('click', (e) => {
            e.preventDefault();
            // Open the Genius Chat interface
            if (window.geniusChat) {
                window.geniusChat.openChat();
            } else {
                console.error('Genius Chat not initialized');
                alert('Chat feature is loading. Please try again in a moment.');
            }
        });

        // Calculator functionality
        document.getElementById('calculatorNav').addEventListener('click', (e) => {
            e.preventDefault();
            showCalculator();
        });

        // Calculator functionality
        function showCalculator() {
            // Hide the main content and sidebar
            const mainWrapper = document.querySelector('.main-wrapper');
            const sidebar = document.getElementById('sidebar');
            
            if (mainWrapper) mainWrapper.style.display = 'none';
            if (sidebar) sidebar.style.display = 'none';
            
            // Create calculator overlay
            const calculatorOverlay = document.createElement('div');
            calculatorOverlay.className = 'calculator-overlay';
            calculatorOverlay.id = 'calculatorOverlay';
            calculatorOverlay.innerHTML = `
                <div class="calculator-container">
                    <div class="calculator-header">
                        <div class="calculator-title">
                            <div class="calculator-title-content">
                                <img src="assets/darkgenius.png" alt="Genius AI" class="calculator-icon">
                                <h2>Calculator</h2>
                            </div>
                            <p>Press Escape to exit</p>
                        </div>
                    </div>
                    <div class="calculator-wrapper">
                        <div class="calculator-screen">
                            <div class="calculator-mode" id="calculatorMode">MODE: Normal</div>
                            <div class="calculator-display-container">
                                <div class="calculator-display" id="calculatorDisplay">0</div>
                                <div class="calculator-expression" id="calculatorExpression"></div>
                            </div>
                            <div class="calculator-menu" id="calculatorMenu"></div>
                            
                        </div>
                        
                        <!-- Floating AI Features -->
                        <div class="calculator-ai-controls-floating">
                            <button class="calc-ai-btn calc-file-btn" id="fileUploadBtn" title="Upload Homework File for AI Analysis">
                                <span class="ai-btn-text">Upload Homework</span>
                            </button>
                            <button class="calc-ai-btn calc-genius-btn" id="geniusChatBtn" title="Ask Genius AI Math Questions">
                                <img src="assets/darkgenius.png" alt="Genius AI" class="genius-btn-icon">
                            </button>
                            <button class="calc-ai-btn calc-history-btn" id="historyBtn" title="View Homework History">
                                <span class="history-btn-icon">üìÑ</span>
                            </button>
                        </div>
                        
                        <div class="calculator-chat-floating" id="calculatorChatContainer">
                            <div class="genius-sidebar-header">
                                <div class="genius-sidebar-title">
                                    <img src="assets/darkgenius.png" alt="Genius" class="genius-sidebar-icon">
                                    <span>Genius AI Math</span>
                                </div>
                                <div class="genius-header-actions">
                                    <button class="genius-close-btn" id="closeGeniusChatBtn">‚úï</button>
                                </div>
                            </div>
                            <div class="genius-chat-messages" id="calculatorChatMessages"></div>
                            <div class="genius-chat-input-container">
                                <div class="genius-chat-input-wrapper">
                                    <textarea 
                                        class="genius-chat-input" 
                                        id="calculatorChatInput" 
                                        placeholder="Ask me any math question..."
                                        rows="1"
                                    ></textarea>
                                    <button class="genius-chat-send-btn" id="sendChatBtn" disabled>
                                        <span class="send-icon">‚Üí</span>
                                    </button>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Homework History Sidebar -->
                        <div class="homework-history-sidebar" id="homeworkHistorySidebar">
                            <div class="homework-history-header">
                                <h3>Homework History</h3>
                                <button class="homework-history-toggle" id="toggleHistoryBtn">‚àí</button>
                            </div>
                            <div class="homework-history-content" id="homeworkHistoryContent">
                                <div class="homework-history-empty">
                                    <p>No homework submitted yet</p>
                                    <p>Upload files to see solutions here</p>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Homework Answers Popup Modal -->
                        <div class="homework-popup-overlay" id="homeworkPopupOverlay" style="display: none;">
                            <div class="homework-popup-modal">
                                <div class="homework-popup-header">
                                    <h3 id="homeworkPopupTitle">Homework Answers</h3>
                                    <button class="homework-popup-close" id="homeworkPopupClose">&times;</button>
                                </div>
                                <div class="homework-popup-content" id="homeworkPopupContent">
                                    <!-- Homework answers will be displayed here -->
                                </div>
                            </div>
                        </div>
                        
                        <!-- Floating Homework Solution Area -->
                        <div class="homework-solution-floating" id="homeworkSolutionFloating" style="display: none;">
                            <div class="solution-header">
                                <div class="solution-title" id="solutionHeader">Homework Solutions</div>
                                <button class="solution-close-btn" id="closeSolutionBtn">‚úï</button>
                            </div>
                            <div class="solution-content" id="solutionContent"></div>
                        </div>
                        
                        <input type="file" id="homeworkFileInput" accept=".pdf,.jpg,.jpeg,.png,.doc,.docx,.txt" style="display: none;">
                        <div class="calculator-buttons">
                            <div class="calculator-row">
                                <button class="calc-btn calc-btn-function" onclick="calculator.clear()">C</button>
                                <button class="calc-btn calc-btn-function" onclick="calculator.clearEntry()">CE</button>
                                <button class="calc-btn calc-btn-function" onclick="calculator.backspace()">BS</button>
                                <button class="calc-btn calc-btn-operator" onclick="calculator.inputOperator('√∑')">/</button>
                            </div>
                            <div class="calculator-row">
                                <button class="calc-btn calc-btn-number" onclick="calculator.input('7')">7</button>
                                <button class="calc-btn calc-btn-number" onclick="calculator.input('8')">8</button>
                                <button class="calc-btn calc-btn-number" onclick="calculator.input('9')">9</button>
                                <button class="calc-btn calc-btn-operator" onclick="calculator.inputOperator('√ó')">*</button>
                            </div>
                            <div class="calculator-row">
                                <button class="calc-btn calc-btn-number" onclick="calculator.input('4')">4</button>
                                <button class="calc-btn calc-btn-number" onclick="calculator.input('5')">5</button>
                                <button class="calc-btn calc-btn-number" onclick="calculator.input('6')">6</button>
                                <button class="calc-btn calc-btn-operator" onclick="calculator.inputOperator('-')">-</button>
                            </div>
                            <div class="calculator-row">
                                <button class="calc-btn calc-btn-number" onclick="calculator.input('1')">1</button>
                                <button class="calc-btn calc-btn-number" onclick="calculator.input('2')">2</button>
                                <button class="calc-btn calc-btn-number" onclick="calculator.input('3')">3</button>
                                <button class="calc-btn calc-btn-operator" onclick="calculator.inputOperator('+')">+</button>
                            </div>
                            <div class="calculator-row">
                                <button class="calc-btn calc-btn-number calc-btn-zero" onclick="calculator.input('0')">0</button>
                                <button class="calc-btn calc-btn-number" onclick="calculator.input('.')">.</button>
                                <button class="calc-btn calc-btn-equals" onclick="calculator.calculate()">=</button>
                            </div>
                            <div class="calculator-row">
                                <button class="calc-btn calc-btn-function" onclick="calculator.input('(')">(</button>
                                <button class="calc-btn calc-btn-function" onclick="calculator.input(')')">)</button>
                                <button class="calc-btn calc-btn-function" onclick="calculator.inputOperator('^')">^</button>
                                <button class="calc-btn calc-btn-function" onclick="calculator.input('sqrt(')">sqrt</button>
                            </div>
                            <div class="calculator-row">
                                <button class="calc-btn calc-btn-function" onclick="calculator.input('sin(')">sin</button>
                                <button class="calc-btn calc-btn-function" onclick="calculator.input('cos(')">cos</button>
                                <button class="calc-btn calc-btn-function" onclick="calculator.input('tan(')">tan</button>
                                <button class="calc-btn calc-btn-function" onclick="calculator.input('log(')">log</button>
                            </div>
                            <div class="calculator-row">
                                <button class="calc-btn calc-btn-function" onclick="calculator.input('ln(')">ln</button>
                                <button class="calc-btn calc-btn-function" onclick="calculator.input('œÄ')">pi</button>
                                <button class="calc-btn calc-btn-function" onclick="calculator.input('e')">e</button>
                                <button class="calc-btn calc-btn-function" onclick="calculator.input('!')">!</button>
                            </div>
                            <div class="calculator-row">
                                <button class="calc-btn calc-btn-function" onclick="calculator.input('asin(')">asin</button>
                                <button class="calc-btn calc-btn-function" onclick="calculator.input('acos(')">acos</button>
                                <button class="calc-btn calc-btn-function" onclick="calculator.input('atan(')">atan</button>
                                <button class="calc-btn calc-btn-function" onclick="calculator.input('exp(')">exp</button>
                            </div>
                            <div class="calculator-row">
                                <button class="calc-btn calc-btn-function" onclick="calculator.input('abs(')">abs</button>
                                <button class="calc-btn calc-btn-function" onclick="calculator.input('floor(')">floor</button>
                                <button class="calc-btn calc-btn-function" onclick="calculator.input('ceil(')">ceil</button>
                                <button class="calc-btn calc-btn-function" onclick="calculator.input('round(')">round</button>
                            </div>
                            <div class="calculator-row">
                                <button class="calc-btn calc-btn-ti84" onclick="calculator.showModeMenu()">MODE</button>
                                <button class="calc-btn calc-btn-ti84" onclick="calculator.showMathMenu()">MATH</button>
                                <button class="calc-btn calc-btn-ti84" onclick="calculator.showVarsMenu()">VARS</button>
                                <button class="calc-btn calc-btn-ti84" onclick="calculator.showStatMenu()">STAT</button>
                            </div>
                            <div class="calculator-row">
                                <button class="calc-btn calc-btn-ti84" onclick="calculator.showMatrixMenu()">MATRIX</button>
                                <button class="calc-btn calc-btn-ti84" onclick="calculator.showListMenu()">LIST</button>
                                <button class="calc-btn calc-btn-ti84" onclick="calculator.showDistMenu()">DISTR</button>
                                <button class="calc-btn calc-btn-ti84" onclick="calculator.showTestMenu()">TEST</button>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            
            // Add to body
            document.body.appendChild(calculatorOverlay);
            
            // Wait for math.js to load, then initialize calculator
            if (typeof window.math !== 'undefined') {
                window.calculator = new Calculator();
                initializeCalculatorAI();
                initializeHomeworkHistory();
            } else {
                // Wait for math.js to load
                const checkMath = setInterval(() => {
                    if (typeof window.math !== 'undefined') {
                        clearInterval(checkMath);
                        window.calculator = new Calculator();
                        initializeCalculatorAI();
                        initializeHomeworkHistory();
                    }
                }, 100);
                
                // Fallback timeout
                setTimeout(() => {
                    clearInterval(checkMath);
                    window.calculator = new Calculator();
                    initializeCalculatorAI();
                    initializeHomeworkHistory();
                }, 2000);
            }
            
            // Add keyboard support
            document.addEventListener('keydown', handleCalculatorKeydown);
            
            // Add escape key listener
            document.addEventListener('keydown', handleCalculatorEscape);
        }
        
        function closeCalculator() {
            const calculatorOverlay = document.getElementById('calculatorOverlay');
            if (calculatorOverlay) {
                calculatorOverlay.remove();
            }
            
            // Show main content and sidebar again
            const mainWrapper = document.querySelector('.main-wrapper');
            const sidebar = document.getElementById('sidebar');
            
            if (mainWrapper) mainWrapper.style.display = 'block';
            if (sidebar) sidebar.style.display = 'flex';
            
            // Remove event listeners
            document.removeEventListener('keydown', handleCalculatorKeydown);
            document.removeEventListener('keydown', handleCalculatorEscape);
        }
        
        function handleCalculatorEscape(event) {
            if (event.key === 'Escape') {
                event.preventDefault();
                closeCalculator();
            }
        }
        
        function handleCalculatorKeydown(event) {
            if (!window.calculator) return;
            
            const key = event.key;
            
            // Numbers and decimal point
            if (key >= '0' && key <= '9' || key === '.') {
                event.preventDefault();
                calculator.input(key);
            }
            // Operators
            else if (key === '+' || key === '-') {
                event.preventDefault();
                calculator.inputOperator(key);
            }
            else if (key === '*') {
                event.preventDefault();
                calculator.inputOperator('√ó');
            }
            else if (key === '/') {
                event.preventDefault();
                calculator.inputOperator('√∑');
            }
            // Special keys
            else if (key === 'Enter' || key === '=') {
                event.preventDefault();
                calculator.calculate();
            }
            else if (key === 'Escape') {
                event.preventDefault();
                calculator.clear();
            }
            else if (key === 'Backspace') {
                event.preventDefault();
                calculator.backspace();
            }
            // Parentheses
            else if (key === '(' || key === ')') {
                event.preventDefault();
                calculator.input(key);
            }
        }

        // Homework History Management
        let homeworkHistory = JSON.parse(localStorage.getItem('homeworkHistory') || '[]');
        
        function initializeHomeworkHistory() {
            const toggleBtn = document.getElementById('toggleHistoryBtn');
            const sidebar = document.getElementById('homeworkHistorySidebar');
            
            // Toggle sidebar
            toggleBtn.addEventListener('click', () => {
                sidebar.classList.toggle('open');
                const isOpen = sidebar.classList.contains('open');
                toggleBtn.textContent = isOpen ? '‚àí' : '+';
            });
            
            // Load existing homework
            loadHomeworkHistory();
        }
        
        function loadHomeworkHistory() {
            console.log('loadHomeworkHistory called');
            console.log('homeworkHistory array:', homeworkHistory);
            console.log('homeworkHistory length:', homeworkHistory.length);
            
            const content = document.getElementById('homeworkHistoryContent');
            
            if (homeworkHistory.length === 0) {
                console.log('No homework history found, showing empty state');
                content.innerHTML = `
                    <div class="homework-history-empty">
                        <p>No homework submitted yet</p>
                        <p>Upload files to see solutions here</p>
                    </div>
                `;
                return;
            }
            
            // Sort by date (newest first)
            const sortedHistory = [...homeworkHistory].sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
            console.log('Sorted history:', sortedHistory);
            
            content.innerHTML = sortedHistory.map((homework, index) => `
                <div class="homework-item" onclick="console.log('Clicked homework item:', '${homework.id}'); showHomeworkFromHistoryById('${homework.id}')">
                    <div class="homework-item-header">
                        <div class="homework-item-title" title="${homework.fileName}">${homework.fileName}</div>
                        <div class="homework-item-date">${new Date(homework.timestamp).toLocaleDateString()}</div>
                    </div>
                    <div class="homework-item-preview">${homework.solution.substring(0, 150)}...</div>
                    <div class="homework-item-status ${homework.status || 'completed'}">${homework.status || 'Completed'}</div>
                </div>
            `).join('');
        }
        
        function addHomeworkToHistory(fileName, solution) {
            const homeworkItem = {
                id: Date.now(),
                fileName: fileName,
                solution: solution,
                timestamp: new Date().toISOString(),
                status: 'completed'
            };
            
            homeworkHistory.unshift(homeworkItem);
            
            // Keep only last 20 items
            if (homeworkHistory.length > 20) {
                homeworkHistory = homeworkHistory.slice(0, 20);
            }
            
            // Save to localStorage
            localStorage.setItem('homeworkHistory', JSON.stringify(homeworkHistory));
            
            // Reload the history display
            loadHomeworkHistory();
        }
        
        function showHomeworkFromHistory(index) {
            const homework = homeworkHistory[index];
            if (homework) {
                try {
                    // Try to parse as JSON first
                    const solutionData = JSON.parse(homework.solution);
                    showHomeworkSolutionFromJSON(solutionData, homework.fileName);
                } catch (parseError) {
                    // Fallback to text display
                    showHomeworkSolution(homework.solution, homework.fileName);
                }
            }
        }
        
        window.showHomeworkFromHistoryById = function(homeworkId) {
            console.log('showHomeworkFromHistoryById called with ID:', homeworkId);
            console.log('Current homework history:', homeworkHistory);
            
            const homework = homeworkHistory.find(h => h.id == homeworkId);
            console.log('Found homework:', homework);
            
            if (homework) {
                try {
                    // Clean the solution text to extract JSON
                    let cleanJsonText = homework.solution;
                    console.log('Original solution text:', cleanJsonText.substring(0, 200) + '...');
                    
                    // Remove markdown code blocks if present
                    if (cleanJsonText.includes('```json')) {
                        cleanJsonText = cleanJsonText.replace(/```json\s*/, '').replace(/```\s*$/, '');
                    } else if (cleanJsonText.includes('```')) {
                        cleanJsonText = cleanJsonText.replace(/```\s*/, '').replace(/```\s*$/, '');
                    }
                    
                    console.log('Cleaned JSON text:', cleanJsonText.substring(0, 200) + '...');
                    
                    // Try to parse as JSON first
                    const solutionData = JSON.parse(cleanJsonText);
                    console.log('Parsed solution data:', solutionData);
                    showHomeworkPopup(solutionData, homework.fileName);
                } catch (parseError) {
                    console.warn('Failed to parse JSON from history, falling back to text display:', parseError);
                    // Fallback to text display
                    showHomeworkPopupText(homework.solution, homework.fileName);
                }
            } else {
                console.error('Homework not found with ID:', homeworkId);
            }
        }
        
        function showHomeworkSolutionFromJSON(solutionData, fileName) {
            const solutionArea = document.getElementById('homeworkSolutionFloating');
            const solutionHeader = document.getElementById('solutionHeader');
            const solutionContent = document.getElementById('solutionContent');
            
            if (!solutionArea || !solutionHeader || !solutionContent) {
                console.error('Homework solution elements not found');
                return;
            }
            
            // Show the floating solution area
            solutionArea.style.display = 'block';
            
            // Set up close button
            const closeBtn = document.getElementById('closeSolutionBtn');
            closeBtn.addEventListener('click', () => {
                solutionArea.style.display = 'none';
            });
            
            // Set header
            solutionHeader.textContent = 'Homework Solutions';
            
            // Clear previous content
            solutionContent.innerHTML = '';
            
            // Process each problem
            if (solutionData.problems && Array.isArray(solutionData.problems)) {
                solutionData.problems.forEach((problem, problemIndex) => {
                    // Problem statement
                    const problemDiv = document.createElement('div');
                    problemDiv.className = 'solution-line solution-problem';
                    problemDiv.textContent = `Problem ${problemIndex + 1}: ${problem.problem}`;
                    solutionContent.appendChild(problemDiv);
                    
                    // Steps
                    if (problem.steps && Array.isArray(problem.steps)) {
                        problem.steps.forEach((step, stepIndex) => {
                            const stepDiv = document.createElement('div');
                            stepDiv.className = 'solution-line solution-step';
                            stepDiv.textContent = step;
                            solutionContent.appendChild(stepDiv);
                        });
                    }
                    
                    // Answer
                    if (problem.answer) {
                        const answerDiv = document.createElement('div');
                        answerDiv.className = 'solution-line solution-answer';
                        answerDiv.innerHTML = `Answer: <span style="color: #00ff88; font-weight: bold;">${problem.answer}</span>`;
                        solutionContent.appendChild(answerDiv);
                    }
                    
                    // Add spacing between problems
                    if (problemIndex < solutionData.problems.length - 1) {
                        const spacerDiv = document.createElement('div');
                        spacerDiv.style.height = '20px';
                        solutionContent.appendChild(spacerDiv);
                    }
                });
            } else {
                // Fallback if no problems array
                const errorDiv = document.createElement('div');
                errorDiv.className = 'solution-line';
                errorDiv.textContent = 'No problems found in the solution data.';
                solutionContent.appendChild(errorDiv);
            }
        }
        
        // New popup functions for homework answers
        window.showHomeworkPopup = function(solutionData, fileName) {
            const popupOverlay = document.getElementById('homeworkPopupOverlay');
            const popupTitle = document.getElementById('homeworkPopupTitle');
            const popupContent = document.getElementById('homeworkPopupContent');
            
            // Set the title
            popupTitle.textContent = `Homework Answers - ${fileName}`;
            
            // Clear previous content
            popupContent.innerHTML = '';
            
            // Process each problem (same format as showHomeworkSolutionFromJSON)
            if (solutionData && solutionData.problems && Array.isArray(solutionData.problems)) {
                solutionData.problems.forEach((problem, problemIndex) => {
                    // Problem statement
                    const problemDiv = document.createElement('div');
                    problemDiv.className = 'solution-problem';
                    problemDiv.textContent = `Problem ${problemIndex + 1}: ${problem.problem || problem.question || 'No problem statement provided'}`;
                    popupContent.appendChild(problemDiv);
                    
                    // Steps
                    if (problem.steps && Array.isArray(problem.steps)) {
                        problem.steps.forEach((step, stepIndex) => {
                            const stepDiv = document.createElement('div');
                            stepDiv.className = 'solution-line';
                            stepDiv.textContent = step;
                            popupContent.appendChild(stepDiv);
                        });
                    } else if (problem.solution && Array.isArray(problem.solution)) {
                        // Alternative: solution array
                        problem.solution.forEach((step, stepIndex) => {
                            const stepDiv = document.createElement('div');
                            stepDiv.className = 'solution-line';
                            stepDiv.textContent = step;
                            popupContent.appendChild(stepDiv);
                        });
                    } else if (problem.solution) {
                        // Single solution string
                        const stepDiv = document.createElement('div');
                        stepDiv.className = 'solution-line';
                        stepDiv.textContent = problem.solution;
                        popupContent.appendChild(stepDiv);
                    }
                    
                    // Answer
                    if (problem.answer) {
                        const answerDiv = document.createElement('div');
                        answerDiv.className = 'solution-answer';
                        answerDiv.innerHTML = `Answer: ${problem.answer}`;
                        popupContent.appendChild(answerDiv);
                    }
                    
                    // Add spacing between problems
                    if (problemIndex < solutionData.problems.length - 1) {
                        const spacerDiv = document.createElement('div');
                        spacerDiv.style.height = '20px';
                        spacerDiv.style.borderBottom = '1px solid rgba(255, 255, 255, 0.1)';
                        spacerDiv.style.marginBottom = '20px';
                        popupContent.appendChild(spacerDiv);
                    }
                });
            } else {
                // Fallback if no problems array - show raw JSON
                const jsonPre = document.createElement('pre');
                jsonPre.style.cssText = `
                    color: #ffffff;
                    font-family: 'Courier New', monospace;
                    font-size: 14px;
                    line-height: 1.6;
                    margin: 0;
                    padding: 20px;
                    background: rgba(0, 0, 0, 0.3);
                    border-radius: 8px;
                    border: 1px solid rgba(255, 255, 255, 0.1);
                    overflow-x: auto;
                    white-space: pre-wrap;
                    word-wrap: break-word;
                `;
                
                if (solutionData) {
                    jsonPre.textContent = JSON.stringify(solutionData, null, 2);
                } else {
                    jsonPre.textContent = 'No solution data available.';
                }
                
                popupContent.appendChild(jsonPre);
            }
            
            // Show the popup
            popupOverlay.style.display = 'flex';
            
            // Add event listeners for closing
            setupPopupCloseListeners();
        }
        
        window.showHomeworkPopupText = function(solutionText, fileName) {
            const popupOverlay = document.getElementById('homeworkPopupOverlay');
            const popupTitle = document.getElementById('homeworkPopupTitle');
            const popupContent = document.getElementById('homeworkPopupContent');
            
            // Set the title
            popupTitle.textContent = `Homework Answers - ${fileName}`;
            
            // Clear previous content
            popupContent.innerHTML = '';
            
            // Create a pre element for text display
            const textPre = document.createElement('pre');
            textPre.style.cssText = `
                color: #ffffff;
                font-family: 'Courier New', monospace;
                font-size: 14px;
                line-height: 1.6;
                margin: 0;
                padding: 20px;
                background: rgba(0, 0, 0, 0.3);
                border-radius: 8px;
                border: 1px solid rgba(255, 255, 255, 0.1);
                overflow-x: auto;
                white-space: pre-wrap;
                word-wrap: break-word;
            `;
            
            // Display the solution text
            textPre.textContent = solutionText;
            popupContent.appendChild(textPre);
            
            // Show the popup
            popupOverlay.style.display = 'flex';
            
            // Add event listeners for closing
            setupPopupCloseListeners();
        }
        
        window.setupPopupCloseListeners = function() {
            const popupOverlay = document.getElementById('homeworkPopupOverlay');
            const closeBtn = document.getElementById('homeworkPopupClose');
            
            // Close button click
            closeBtn.onclick = () => {
                popupOverlay.style.display = 'none';
            };
            
            // Click outside to close
            popupOverlay.onclick = (e) => {
                if (e.target === popupOverlay) {
                    popupOverlay.style.display = 'none';
                }
            };
            
            // Escape key to close
            const handleKeydown = (e) => {
                if (e.key === 'Escape') {
                    popupOverlay.style.display = 'none';
                    document.removeEventListener('keydown', handleKeydown);
                }
            };
            document.addEventListener('keydown', handleKeydown);
        }
        
        function toggleHomeworkHistory() {
            const sidebar = document.getElementById('homeworkHistorySidebar');
            const toggleBtn = document.getElementById('toggleHistoryBtn');
            
            sidebar.classList.toggle('open');
            const isOpen = sidebar.classList.contains('open');
            toggleBtn.textContent = isOpen ? '‚àí' : '+';
            
            // If opening, refresh the history display
            if (isOpen) {
                loadHomeworkHistory();
            }
        }

        // Calculator AI Features
        function initializeCalculatorAI() {
            const fileUploadBtn = document.getElementById('fileUploadBtn');
            const geniusChatBtn = document.getElementById('geniusChatBtn');
            const chatContainer = document.getElementById('calculatorChatContainer');
            const chatInput = document.getElementById('calculatorChatInput');
            const sendBtn = document.getElementById('sendChatBtn');
            const fileInput = document.getElementById('homeworkFileInput');
            
            // File upload button
            fileUploadBtn.addEventListener('click', () => {
                fileInput.click();
            });
            
            // File input change
            fileInput.addEventListener('change', async (event) => {
                const file = event.target.files[0];
                if (file) {
                    // Hide chat container when processing file
                    chatContainer.style.display = 'none';
                    await processHomeworkFile(file);
                }
            });
            
            // Genius chat button
            geniusChatBtn.addEventListener('click', () => {
                toggleGeniusChat();
            });
            
            // Close genius chat button
            const closeGeniusChatBtn = document.getElementById('closeGeniusChatBtn');
            closeGeniusChatBtn.addEventListener('click', () => {
                toggleGeniusChat();
            });
            
            // History button
            const historyBtn = document.getElementById('historyBtn');
            historyBtn.addEventListener('click', () => {
                toggleHomeworkHistory();
            });
            
            // Voice input functionality removed
            
            // Don't show chat for file upload - just process the file
            // fileUploadBtn.addEventListener('click', () => {
            //     chatContainer.style.display = 'block';
            // });
            
            // Send chat message
            sendBtn.addEventListener('click', () => {
                sendGeniusChatMessage();
            });
            
            // Enter key in chat input
            chatInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    sendGeniusChatMessage();
                }
            });
            
            // Auto-resize textarea
            chatInput.addEventListener('input', () => {
                autoResizeTextarea(chatInput);
                updateSendButton();
            });
        }
        
        function toggleGeniusChat() {
            const chatContainer = document.getElementById('calculatorChatContainer');
            const chatMessages = document.getElementById('calculatorChatMessages');
            
            if (chatContainer.classList.contains('open')) {
                // Hide chat
                chatContainer.classList.remove('open');
            } else {
                // Show chat
                chatContainer.classList.add('open');
                
                // Initialize with welcome message if empty
                if (chatMessages.children.length === 0) {
                    chatMessages.innerHTML = `
                        <div class="genius-chat-welcome">
                            <div class="genius-welcome-icon">
                                <img src="assets/darkgenius.png" alt="Genius AI" class="genius-welcome-logo">
                            </div>
                            <h2>Genius AI Math Assistant</h2>
                            <p>Ask me any math question! I can help solve equations, explain concepts, and provide step-by-step solutions.</p>
                            <div class="genius-suggestions">
                                <div class="suggestion-chip" data-suggestion="Solve 2x + 5 = 13">
                                    Solve 2x + 5 = 13
                                </div>
                                <div class="suggestion-chip" data-suggestion="Explain derivatives">
                                    Explain derivatives
                                </div>
                                <div class="suggestion-chip" data-suggestion="Help with calculus">
                                    Help with calculus
                                </div>
                                <div class="suggestion-chip" data-suggestion="What is the quadratic formula?">
                                    What is the quadratic formula?
                                </div>
                            </div>
                        </div>
                    `;
                    
                    // Add suggestion chip listeners
                    document.querySelectorAll('.suggestion-chip').forEach(chip => {
                        chip.addEventListener('click', () => {
                            const suggestion = chip.dataset.suggestion;
                            document.getElementById('calculatorChatInput').value = suggestion;
                            sendGeniusChatMessage();
                        });
                    });
                }
                
                // Focus on input
                setTimeout(() => {
                    document.getElementById('calculatorChatInput').focus();
                }, 100);
            }
        }
        
        async function processHomeworkFile(file) {
            const display = document.getElementById('calculatorDisplay');
            const expression = document.getElementById('calculatorExpression');
            const chatMessages = document.getElementById('calculatorChatMessages');
            
            // Show "Genius is thinking" effect
            showGeniusThinkingEffect();
            
            try {
                // Get API key using the same method as other parts of the app
                const apiKey = window.getOpenAIApiKey() || window.APP_CONFIG?.OPENAI_API_KEY;
                if (!apiKey) {
                    throw new Error('OpenAI API key not found. Please add your API key in the profile settings.');
                }
                
                // Convert file to base64
                const base64 = await fileToBase64(file);
                
                // Send to OpenAI for analysis
                const response = await fetch('https://api.openai.com/v1/chat/completions', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${apiKey}`
                    },
                    body: JSON.stringify({
                        model: 'gpt-4o',
                        messages: [{
                            role: 'user',
                            content: [
                                {
                                    type: 'text',
                                    text: `Please solve all the math problems in this homework file and respond with ONLY valid JSON in this exact format (no markdown, no code blocks, just raw JSON):

{
  "problems": [
    {
      "problem": "Problem statement here",
      "steps": [
        "Step 1: First step",
        "Step 2: Second step"
      ],
      "answer": "Final answer here"
    }
  ]
}

IMPORTANT: Respond with ONLY the JSON object, no markdown formatting, no code blocks, no additional text. The response must be valid JSON that can be parsed directly.`
                                },
                                {
                                    type: 'image_url',
                                    image_url: {
                                        url: `data:${file.type};base64,${base64}`
                                    }
                                }
                            ]
                        }],
                        max_tokens: 2000
                    })
                });
                
                const data = await response.json();
                
                if (data.choices && data.choices[0]) {
                    const solutionText = data.choices[0].message.content;
                    
                    // Hide thinking effect
                    hideGeniusThinkingEffect();
                    
                    try {
                        // Clean the solution text to extract JSON
                        let cleanJsonText = solutionText;
                        
                        // Remove markdown code blocks if present
                        if (cleanJsonText.includes('```json')) {
                            cleanJsonText = cleanJsonText.replace(/```json\s*/, '').replace(/```\s*$/, '');
                        } else if (cleanJsonText.includes('```')) {
                            cleanJsonText = cleanJsonText.replace(/```\s*/, '').replace(/```\s*$/, '');
                        }
                        
                        // Try to parse as JSON
                        const solutionData = JSON.parse(cleanJsonText);
                        showHomeworkSolutionFromJSON(solutionData, file.name);
                        
                        // Add to homework history
                        addHomeworkToHistory(file.name, solutionText);
                    } catch (parseError) {
                        console.warn('Failed to parse JSON, falling back to text display:', parseError);
                        console.log('Raw solution text:', solutionText);
                        // Fallback to text display if JSON parsing fails
                        showHomeworkSolution(solutionText, file.name);
                        addHomeworkToHistory(file.name, solutionText);
                    }
                    
                    // Don't add to chat - just show in solution area
                } else {
                    throw new Error('No response from AI');
                }
                
            } catch (error) {
                console.error('Error processing homework:', error);
                hideGeniusThinkingEffect();
                display.textContent = 'Error processing file';
                expression.textContent = 'Please try again';
                addChatMessage('Error', 'Failed to process homework file. Please try again.');
            }
        }
        
        function showGeniusThinkingEffect() {
            // Create floating thinking effect using the same style as other screens
            const thinkingDiv = document.createElement('div');
            thinkingDiv.id = 'geniusThinkingEffect';
            thinkingDiv.className = 'genius-floating';
            thinkingDiv.style.cssText = `
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                background: transparent;
                z-index: 10000;
            `;
            
            thinkingDiv.innerHTML = `
                <div class="genius-thinking-container" style="
                    display: flex;
                    align-items: center;
                    gap: 12px;
                    color: #333333;
                ">
                    <img src="assets/darkgenius.png" alt="Genius" class="genius-thinking-icon genius-pulse-icon" style="
                        width: 24px;
                        height: 24px;
                        border-radius: 8px;
                    ">
                    <div class="genius-thinking-text" style="font-size: 16px; font-weight: 500;">Genius is thinking...</div>
                    <div class="genius-thinking-dots">
                        <span></span>
                        <span></span>
                        <span></span>
                    </div>
                </div>
            `;
            
            // Add the same CSS animations as other screens
            if (!document.querySelector('#genius-thinking-calculator-styles')) {
                const style = document.createElement('style');
                style.id = 'genius-thinking-calculator-styles';
                style.textContent = `
                    .genius-pulse-icon {
                        animation: geniusPulse 1.5s ease-in-out infinite;
                    }
                    @keyframes geniusPulse {
                        0%, 100% { transform: scale(1); opacity: 1; }
                        50% { transform: scale(1.1); opacity: 0.8; }
                    }
                    .genius-thinking-dots span {
                        display: inline-block;
                        width: 8px;
                        height: 8px;
                        border-radius: 50%;
                        background: #333333;
                        margin: 0 2px;
                        animation: geniusDots 1.4s ease-in-out infinite;
                    }
                    .genius-thinking-dots span:nth-child(2) {
                        animation-delay: 0.2s;
                    }
                    .genius-thinking-dots span:nth-child(3) {
                        animation-delay: 0.4s;
                    }
                    @keyframes geniusDots {
                        0%, 60%, 100% { transform: scale(1); opacity: 0.5; }
                        30% { transform: scale(1.2); opacity: 1; }
                    }
                `;
                document.head.appendChild(style);
            }
            
            document.body.appendChild(thinkingDiv);
        }
        
        function hideGeniusThinkingEffect() {
            const thinkingDiv = document.getElementById('geniusThinkingEffect');
            if (thinkingDiv) {
                thinkingDiv.remove();
            }
        }
        
        function showHomeworkSolution(solution, fileName) {
            console.log('Showing homework solution:', solution.substring(0, 100) + '...');
            
            // Get the floating solution area
            const solutionArea = document.getElementById('homeworkSolutionFloating');
            const solutionHeader = document.getElementById('solutionHeader');
            const solutionContent = document.getElementById('solutionContent');
            
            // Show the solution area
            solutionArea.style.display = 'block';
            
            // Set up close button
            const closeBtn = document.getElementById('closeSolutionBtn');
            closeBtn.addEventListener('click', () => {
                solutionArea.style.display = 'none';
            });
            
            // Clear previous content
            solutionContent.innerHTML = '';
            
            // Process and type out the solution with better formatting
            const lines = solution.split('\n').filter(line => line.trim());
            console.log('Solution lines:', lines.length);
            
            let lineIndex = 0;
            
            function typeNextLine() {
                if (lineIndex < lines.length) {
                    const line = lines[lineIndex].trim();
                    if (line) {
                        const lineDiv = document.createElement('div');
                        lineDiv.className = 'solution-line';
                        
                        // Clean up the line text first
                        let cleanLine = line
                            .replace(/\\\(/g, '')  // Remove LaTeX delimiters
                            .replace(/\\\)/g, '')
                            .replace(/\\frac\{([^}]+)\}\{([^}]+)\}/g, '$1/$2')  // Convert fractions
                            .replace(/\*\*([^*]+)\*\*/g, '$1')  // Remove bold markdown
                            .replace(/[=:]\s*$/, '')  // Remove trailing = or :
                            .trim();
                        
                        // Apply different styling based on content
                        if (cleanLine.match(/^Problem \d+/i) || cleanLine.match(/^\d+\./)) {
                            lineDiv.className += ' solution-problem';
                            lineDiv.textContent = cleanLine;
                        } else if (cleanLine.match(/^Step \d+/i) || cleanLine.match(/^\d+\)/)) {
                            lineDiv.className += ' solution-step';
                            lineDiv.textContent = cleanLine;
                        } else if (cleanLine.match(/final answer|answer/i)) {
                            lineDiv.className += ' solution-answer';
                            // Extract just the answer value
                            const answerMatch = cleanLine.match(/(?:final answer|answer)[\s:]*([^=]+)/i);
                            const answerValue = answerMatch ? answerMatch[1].trim() : cleanLine;
                            lineDiv.textContent = `Answer: ${answerValue}`;
                        } else if (cleanLine.match(/^\d+\s*[√∑\/]\s*\d+/)) {
                            // Division problems
                            lineDiv.className += ' solution-problem';
                            lineDiv.textContent = cleanLine;
                        } else if (cleanLine.match(/^\d+\/\d+\s*=\s*\d+/)) {
                            // Solution steps
                            lineDiv.className += ' solution-step';
                            lineDiv.textContent = cleanLine;
                        } else if (cleanLine.match(/^\d+$/)) {
                            // Just a number - likely final answer
                            lineDiv.className += ' solution-answer';
                            lineDiv.textContent = `Answer: ${cleanLine}`;
                        } else {
                            // Regular text
                            lineDiv.textContent = cleanLine;
                        }
                        
                        solutionContent.appendChild(lineDiv);
                        
                        // Add typing effect to the line
                        const text = lineDiv.textContent || line; // Use cleaned text if available
                        lineDiv.textContent = ''; // Clear for typing effect
                        let charIndex = 0;
                        
                        function typeChar() {
                            if (charIndex < text.length) {
                                lineDiv.textContent += text.charAt(charIndex);
                                charIndex++;
                                setTimeout(typeChar, 20); // 20ms delay between characters
                            } else {
                                // Move to next line after a short delay
                                setTimeout(() => {
                                    lineIndex++;
                                    typeNextLine();
                                }, 300);
                            }
                        }
                        
                        typeChar();
                    } else {
                        lineIndex++;
                        typeNextLine();
                    }
                } else {
                    console.log('Finished typing solution');
                }
            }
            
            // Start typing after a short delay
            setTimeout(() => {
                typeNextLine();
            }, 500);
            
            // Smooth scroll to solution area
            setTimeout(() => {
                solutionArea.scrollIntoView({ behavior: 'smooth', block: 'start' });
            }, 1000);
        }
        
        async function sendGeniusChatMessage() {
            const chatInput = document.getElementById('calculatorChatInput');
            const chatMessages = document.getElementById('calculatorChatMessages');
            
            const message = chatInput.value.trim();
            if (!message) return;
            
            // Add user message to chat
            addGeniusChatMessage('user', message);
            chatInput.value = '';
            
            // Show typing indicator
            showGeniusTypingIndicator();
            
            try {
                // Get API key using the same method as other parts of the app
                const apiKey = window.getOpenAIApiKey() || window.APP_CONFIG?.OPENAI_API_KEY;
                if (!apiKey) {
                    throw new Error('OpenAI API key not found. Please add your API key in the profile settings.');
                }
                
                // Send to OpenAI with math-focused system prompt
                const response = await fetch('https://api.openai.com/v1/chat/completions', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${apiKey}`
                    },
                    body: JSON.stringify({
                        model: 'gpt-4o',
                        messages: [{
                            role: 'system',
                            content: `You are Genius AI, a helpful math assistant. You excel at solving math problems, explaining concepts, and providing step-by-step solutions. 

Your capabilities include:
- Solving equations and algebraic problems
- Explaining mathematical concepts clearly
- Providing step-by-step solutions
- Helping with calculus, algebra, geometry, and more
- Creating visual representations when helpful

Always be encouraging and educational. Use clear formatting with headers, bullet points, and examples to make your responses easy to understand.`
                        }, {
                            role: 'user',
                            content: message
                        }],
                        max_tokens: 2000,
                        temperature: 0.7,
                        stream: true
                    })
                });
                
                if (!response.ok) {
                    throw new Error(`OpenAI API error: ${response.status}`);
                }
                
                // Hide typing indicator
                hideGeniusTypingIndicator();
                
                // Create AI response container
                const messageDiv = document.createElement('div');
                messageDiv.className = 'genius-ai-response';
                messageDiv.innerHTML = `
                    <div class="genius-ai-content">
                        <div class="genius-ai-text" id="streamingText"></div>
                        <div class="genius-ai-actions" style="opacity: 0;">
                            <button class="genius-ai-action" id="copyBtn" title="Copy">üìã</button>
                        </div>
                    </div>
                `;
                chatMessages.appendChild(messageDiv);
                chatMessages.scrollTop = chatMessages.scrollHeight;
                
                const textElement = document.getElementById('streamingText');
                let fullResponse = '';
                
                // Setup copy button
                const copyBtn = document.getElementById('copyBtn');
                copyBtn.addEventListener('click', () => {
                    navigator.clipboard.writeText(fullResponse);
                });
                
                // Read the stream
                const reader = response.body.getReader();
                const decoder = new TextDecoder();
                
                try {
                    while (true) {
                        const { done, value } = await reader.read();
                        if (done) break;
                        
                        const chunk = decoder.decode(value);
                        const lines = chunk.split('\n');
                        
                        for (const line of lines) {
                            if (line.startsWith('data: ')) {
                                const data = line.slice(6);
                                if (data === '[DONE]') continue;
                                
                                try {
                                    const parsed = JSON.parse(data);
                                    const content = parsed.choices?.[0]?.delta?.content;
                                    if (content) {
                                        fullResponse += content;
                                        textElement.innerHTML = formatGeniusMessage(fullResponse);
                                        chatMessages.scrollTop = chatMessages.scrollHeight;
                                    }
                                } catch (e) {
                                    // Ignore parsing errors for incomplete chunks
                                }
                            }
                        }
                    }
                } finally {
                    reader.releaseLock();
                }
                
                // Show copy button after streaming is complete
                const actions = messageDiv.querySelector('.genius-ai-actions');
                actions.style.opacity = '1';
                
            } catch (error) {
                console.error('Error getting AI response:', error);
                hideGeniusTypingIndicator();
                addGeniusChatMessage('assistant', `Sorry, I encountered an error: ${error.message}`);
            }
        }
        
        function addGeniusChatMessage(role, content) {
            const chatMessages = document.getElementById('calculatorChatMessages');
            
            // Remove welcome message if it exists
            const welcome = chatMessages.querySelector('.genius-chat-welcome');
            if (welcome) {
                welcome.remove();
            }
            
            if (role === 'user') {
                const messageDiv = document.createElement('div');
                messageDiv.className = 'genius-chat-message user';
                messageDiv.innerHTML = `
                    <div class="genius-message-content">
                        <div class="genius-message-text">${formatGeniusMessage(content)}</div>
                    </div>
                `;
                chatMessages.appendChild(messageDiv);
            } else {
                const messageDiv = document.createElement('div');
                messageDiv.className = 'genius-ai-response';
                messageDiv.innerHTML = `
                    <div class="genius-ai-content">
                        <div class="genius-ai-text">${formatGeniusMessage(content)}</div>
                        <div class="genius-ai-actions">
                            <button class="genius-ai-action" onclick="navigator.clipboard.writeText('${content.replace(/'/g, "\\'")}')" title="Copy">
                                üìã
                            </button>
                        </div>
                    </div>
                `;
                chatMessages.appendChild(messageDiv);
            }
            
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }
        
        function showGeniusTypingIndicator() {
            const chatMessages = document.getElementById('calculatorChatMessages');
            const typingDiv = document.createElement('div');
            typingDiv.className = 'genius-typing-simple';
            typingDiv.id = 'geniusTypingIndicator';
            typingDiv.innerHTML = `
                <div class="genius-typing-dots">
                    <div class="typing-dot"></div>
                    <div class="typing-dot"></div>
                    <div class="typing-dot"></div>
                </div>
            `;
            chatMessages.appendChild(typingDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }
        
        function hideGeniusTypingIndicator() {
            const typingIndicator = document.getElementById('geniusTypingIndicator');
            if (typingIndicator) {
                typingIndicator.remove();
            }
        }
        
        function formatGeniusMessage(content) {
            // Enhanced markdown formatting like ChatGPT
            let formatted = content
                // Headers
                .replace(/^### (.*$)/gim, '<h3>$1</h3>')
                .replace(/^## (.*$)/gim, '<h2>$1</h2>')
                .replace(/^# (.*$)/gim, '<h1>$1</h1>')
                // Bold and italic
                .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
                .replace(/\*(.*?)\*/g, '<em>$1</em>')
                // Code blocks
                .replace(/```([\s\S]*?)```/g, '<pre><code>$1</code></pre>')
                .replace(/`(.*?)`/g, '<code>$1</code>')
                // Lists
                .replace(/^\* (.*$)/gim, '<li>$1</li>')
                .replace(/^- (.*$)/gim, '<li>$1</li>')
                .replace(/^\d+\. (.*$)/gim, '<li>$1</li>')
                // Line breaks
                .replace(/\n\n/g, '</p><p>')
                .replace(/\n/g, '<br>');
            
            // Wrap list items in ul tags
            formatted = formatted.replace(/(<li>.*<\/li>)/gs, '<ul>$1</ul>');
            
            // Wrap paragraphs
            if (!formatted.startsWith('<h') && !formatted.startsWith('<ul') && !formatted.startsWith('<pre')) {
                formatted = '<p>' + formatted + '</p>';
            }
            
            return formatted;
        }
        
        function autoResizeTextarea(textarea) {
            textarea.style.height = 'auto';
            textarea.style.height = Math.min(textarea.scrollHeight, 120) + 'px';
        }
        
        function updateSendButton() {
            const input = document.getElementById('calculatorChatInput');
            const sendBtn = document.getElementById('sendChatBtn');
            sendBtn.disabled = !input.value.trim();
        }
        
        function addChatMessage(sender, message) {
            const chatMessages = document.getElementById('calculatorChatMessages');
            const messageDiv = document.createElement('div');
            messageDiv.innerHTML = `<strong>${sender}:</strong> ${message}`;
            messageDiv.style.marginBottom = '8px';
            chatMessages.appendChild(messageDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }
        
        function getOpenAIApiKey() {
            // Try to get API key from various sources
            const currentUser = JSON.parse(localStorage.getItem('currentUser') || '{}');
            const userData = JSON.parse(localStorage.getItem('userData') || '{}');
            
            return currentUser.openaiApiKey || userData.openaiApiKey || window.geniusChatApiKey || null;
        }
        
        function fileToBase64(file) {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.readAsDataURL(file);
                reader.onload = () => {
                    const base64 = reader.result.split(',')[1];
                    resolve(base64);
                };
                reader.onerror = error => reject(error);
            });
        }

        // Calculator class
        class Calculator {
            constructor() {
                this.display = document.getElementById('calculatorDisplay');
                this.expression = document.getElementById('calculatorExpression');
                this.mode = document.getElementById('calculatorMode');
                this.menu = document.getElementById('calculatorMenu');
                this.currentInput = '0';
                this.currentExpression = '';
                this.lastResult = null;
                this.isNewInput = true;
                this.math = window.math || this.createMathFallback(); // Math.js instance or fallback
                this.calculatorMode = 'Normal';
                this.angleMode = 'DEG'; // DEG or RAD
                this.displayMode = 'Float'; // Float, Fix, Sci, Eng
                this.variables = {}; // Store variables like A, B, C, etc.
            }
            
            createMathFallback() {
                // Simple math fallback if math.js is not available
                return {
                    evaluate: (expression) => {
                        try {
                            // Basic math evaluation fallback
                            const cleanExpr = expression
                                .replace(/√ó/g, '*')
                                .replace(/√∑/g, '/')
                                .replace(/\^/g, '**')
                                .replace(/œÄ/g, Math.PI)
                                .replace(/e/g, Math.E);
                            
                            // Use Function constructor for safe evaluation
                            return Function('"use strict"; return (' + cleanExpr + ')')();
                        } catch (error) {
                            throw new Error('Invalid expression');
                        }
                    }
                };
            }

            input(value) {
                if (this.isNewInput) {
                    this.currentInput = value === '.' ? '0.' : value;
                    this.isNewInput = false;
                } else {
                    if (value === '.' && this.currentInput.includes('.')) return;
                    this.currentInput += value;
                }
                this.updateDisplay();
            }

            clear() {
                this.currentInput = '0';
                this.currentExpression = '';
                this.lastResult = null;
                this.isNewInput = true;
                this.updateDisplay();
            }

            clearEntry() {
                this.currentInput = '0';
                this.isNewInput = true;
                this.updateDisplay();
            }

            backspace() {
                if (this.currentInput.length > 1) {
                    this.currentInput = this.currentInput.slice(0, -1);
                } else {
                    this.currentInput = '0';
                    this.isNewInput = true;
                }
                this.updateDisplay();
            }

            calculate() {
                try {
                    let expression = this.currentExpression + this.currentInput;
                    
                    // Replace display symbols with Math.js compatible operators
                    expression = expression.replace(/√ó/g, '*').replace(/√∑/g, '/');
                    
                    // Handle special functions and constants
                    expression = this.processMathJSFunctions(expression);
                    
                    // Evaluate using Math.js
                    const result = this.math.evaluate(expression);
                    
                    this.lastResult = result;
                    this.currentInput = this.formatResult(result);
                    this.currentExpression = '';
                    this.isNewInput = true;
                    this.updateDisplay();
                } catch (error) {
                    console.error('Calculation error:', error);
                    this.currentInput = 'Error';
                    this.isNewInput = true;
                    this.updateDisplay();
                }
            }

            processMathJSFunctions(expression) {
                // Math.js handles most functions natively, but we need to handle some special cases
                
                // Handle factorial (Math.js uses factorial function)
                expression = expression.replace(/(\d+)!/g, 'factorial($1)');
                
                // Handle square root (Math.js uses sqrt function)
                expression = expression.replace(/‚àö(\d+(?:\.\d+)?)/g, 'sqrt($1)');
                
                // Math.js handles œÄ, e, sin, cos, tan, log, ln, asin, acos, atan, exp, abs, floor, ceil, round natively
                // No need to replace them as Math.js will understand them directly
                
                return expression;
            }

            formatResult(result) {
                // Format the result for display
                if (typeof result === 'number') {
                    if (isNaN(result)) return 'NaN';
                    if (!isFinite(result)) return result > 0 ? '‚àû' : '-‚àû';
                    
                    // Format with appropriate precision
                    if (Math.abs(result) < 1e-10 && result !== 0) {
                        return result.toExponential(6);
                    } else if (Math.abs(result) > 1e10) {
                        return result.toExponential(6);
                    } else {
                        // Round to 10 decimal places to avoid floating point precision issues
                        return Math.round(result * 1e10) / 1e10;
                    }
                }
                return result.toString();
            }


            updateDisplay() {
                this.display.textContent = this.currentInput;
                this.expression.textContent = this.currentExpression;
                this.mode.textContent = `MODE: ${this.calculatorMode} | ${this.angleMode} | ${this.displayMode}`;
            }

            // TI-84 Menu Functions
            showModeMenu() {
                this.menu.innerHTML = `
                    <div class="ti84-menu">
                        <h4>MODE Menu</h4>
                        <button onclick="calculator.setAngleMode('DEG')">1: Deg (Degrees)</button>
                        <button onclick="calculator.setAngleMode('RAD')">2: Rad (Radians)</button>
                        <button onclick="calculator.setDisplayMode('Float')">3: Float (Floating Point)</button>
                        <button onclick="calculator.setDisplayMode('Fix')">4: Fix (Fixed Decimal)</button>
                        <button onclick="calculator.setDisplayMode('Sci')">5: Sci (Scientific)</button>
                        <button onclick="calculator.setDisplayMode('Eng')">6: Eng (Engineering)</button>
                    </div>
                `;
            }

            showMathMenu() {
                this.menu.innerHTML = `
                    <div class="ti84-menu">
                        <h4>MATH Menu</h4>
                        <button onclick="calculator.input('gcd(')">1: gcd( (Greatest Common Divisor)</button>
                        <button onclick="calculator.input('lcm(')">2: lcm( (Least Common Multiple)</button>
                        <button onclick="calculator.input('3:')">3: 3: (Cube Root)</button>
                        <button onclick="calculator.input('x‚àö(')">4: x‚àö( (xth Root)</button>
                        <button onclick="calculator.input('fPart(')">5: fPart( (Fractional Part)</button>
                        <button onclick="calculator.input('iPart(')">6: iPart( (Integer Part)</button>
                    </div>
                `;
            }

            showVarsMenu() {
                this.menu.innerHTML = `
                    <div class="ti84-menu">
                        <h4>VARS Menu</h4>
                        <button onclick="calculator.showVariable('A')">A: ${this.variables.A || 'undefined'}</button>
                        <button onclick="calculator.showVariable('B')">B: ${this.variables.B || 'undefined'}</button>
                        <button onclick="calculator.showVariable('C')">C: ${this.variables.C || 'undefined'}</button>
                        <button onclick="calculator.showVariable('D')">D: ${this.variables.D || 'undefined'}</button>
                        <button onclick="calculator.showVariable('E')">E: ${this.variables.E || 'undefined'}</button>
                        <button onclick="calculator.showVariable('F')">F: ${this.variables.F || 'undefined'}</button>
                    </div>
                `;
            }

            showStatMenu() {
                this.menu.innerHTML = `
                    <div class="ti84-menu">
                        <h4>STAT Menu</h4>
                        <button onclick="calculator.input('mean(')">1: mean( (Mean)</button>
                        <button onclick="calculator.input('median(')">2: median( (Median)</button>
                        <button onclick="calculator.input('stdDev(')">3: stdDev( (Standard Deviation)</button>
                        <button onclick="calculator.input('variance(')">4: variance( (Variance)</button>
                        <button onclick="calculator.input('min(')">5: min( (Minimum)</button>
                        <button onclick="calculator.input('max(')">6: max( (Maximum)</button>
                    </div>
                `;
            }

            showMatrixMenu() {
                this.menu.innerHTML = `
                    <div class="ti84-menu">
                        <h4>MATRIX Menu</h4>
                        <button onclick="calculator.input('det(')">1: det( (Determinant)</button>
                        <button onclick="calculator.input('transpose(')">2: transpose( (Transpose)</button>
                        <button onclick="calculator.input('inverse(')">3: inverse( (Inverse)</button>
                        <button onclick="calculator.input('identity(')">4: identity( (Identity Matrix)</button>
                        <button onclick="calculator.input('zeros(')">5: zeros( (Zero Matrix)</button>
                        <button onclick="calculator.input('ones(')">6: ones( (Ones Matrix)</button>
                    </div>
                `;
            }

            showListMenu() {
                this.menu.innerHTML = `
                    <div class="ti84-menu">
                        <h4>LIST Menu</h4>
                        <button onclick="calculator.input('sum(')">1: sum( (Sum of List)</button>
                        <button onclick="calculator.input('prod(')">2: prod( (Product of List)</button>
                        <button onclick="calculator.input('length(')">3: length( (List Length)</button>
                        <button onclick="calculator.input('sort(')">4: sort( (Sort List)</button>
                        <button onclick="calculator.input('reverse(')">5: reverse( (Reverse List)</button>
                        <button onclick="calculator.input('unique(')">6: unique( (Unique Elements)</button>
                    </div>
                `;
            }

            showDistMenu() {
                this.menu.innerHTML = `
                    <div class="ti84-menu">
                        <h4>DISTR Menu</h4>
                        <button onclick="calculator.input('normalpdf(')">1: normalpdf( (Normal PDF)</button>
                        <button onclick="calculator.input('normalcdf(')">2: normalcdf( (Normal CDF)</button>
                        <button onclick="calculator.input('invNorm(')">3: invNorm( (Inverse Normal)</button>
                        <button onclick="calculator.input('tpdf(')">4: tpdf( (t PDF)</button>
                        <button onclick="calculator.input('tcdf(')">5: tcdf( (t CDF)</button>
                        <button onclick="calculator.input('chi2pdf(')">6: chi2pdf( (Chi-square PDF)</button>
                    </div>
                `;
            }

            showTestMenu() {
                this.menu.innerHTML = `
                    <div class="ti84-menu">
                        <h4>TEST Menu</h4>
                        <button onclick="calculator.input('zTest(')">1: zTest( (Z-Test)</button>
                        <button onclick="calculator.input('tTest(')">2: tTest( (T-Test)</button>
                        <button onclick="calculator.input('2-SampZTest(')">3: 2-SampZTest( (2-Sample Z-Test)</button>
                        <button onclick="calculator.input('2-SampTTest(')">4: 2-SampTTest( (2-Sample T-Test)</button>
                        <button onclick="calculator.input('1-PropZTest(')">5: 1-PropZTest( (1-Prop Z-Test)</button>
                        <button onclick="calculator.input('2-PropZTest(')">6: 2-PropZTest( (2-Prop Z-Test)</button>
                    </div>
                `;
            }

            setAngleMode(mode) {
                this.angleMode = mode;
                this.menu.innerHTML = '';
                this.updateDisplay();
            }

            setDisplayMode(mode) {
                this.displayMode = mode;
                this.menu.innerHTML = '';
                this.updateDisplay();
            }

            showVariable(varName) {
                const value = this.variables[varName];
                if (value !== undefined) {
                    this.currentInput = value.toString();
                    this.isNewInput = true;
                    this.updateDisplay();
                }
                this.menu.innerHTML = '';
            }

            // Handle operator input
            inputOperator(operator) {
                if (!this.isNewInput) {
                    this.currentExpression += this.currentInput + operator;
                    this.currentInput = '0';
                    this.isNewInput = true;
                } else {
                    this.currentExpression = this.currentExpression.slice(0, -1) + operator;
                }
                this.updateDisplay();
            }
        }

        } // End of initializeDashboard function

        // Import class form and view functions
        async function loadClassModules() {
            console.log('Loading class modules...');
            
            return new Promise((resolve) => {
                let loadedCount = 0;
                const totalScripts = 3; // Updated to include documentEditor
                
                function checkComplete() {
                    loadedCount++;
                    console.log(`Loaded ${loadedCount}/${totalScripts} scripts`);
                    
                    if (loadedCount === totalScripts) {
                        // Check if functions are available
                        if (typeof window.addClass === 'function' && 
                            typeof window.showClassView === 'function' && 
                            typeof window.closeClassView === 'function' &&
                            typeof window.openDocumentEditor === 'function' &&
                            typeof window.closeDocumentEditor === 'function') {
                            console.log('All modules loaded successfully via scripts');
                            resolve(true);
                        } else {
                            console.error('Scripts loaded but functions not available');
                            console.log('Available functions:', {
                                addClass: typeof window.addClass,
                                showClassView: typeof window.showClassView,
                                closeClassView: typeof window.closeClassView,
                                openDocumentEditor: typeof window.openDocumentEditor,
                                closeDocumentEditor: typeof window.closeDocumentEditor
                            });
                            resolve(false);
                        }
                    }
                }
                
                // Load classForm.js
                const script1 = document.createElement('script');
                script1.src = './js/classForm.js';
                script1.onload = () => {
                    console.log('classForm.js loaded successfully');
                    checkComplete();
                };
                script1.onerror = (e) => {
                    console.error('Failed to load classForm.js:', e);
                    checkComplete();
                };
                document.head.appendChild(script1);
                
                // Load classView.js
                const script2 = document.createElement('script');
                script2.src = './js/classView.js';
                script2.onload = () => {
                    console.log('classView.js loaded successfully');
                    checkComplete();
                };
                script2.onerror = (e) => {
                    console.error('Failed to load classView.js:', e);
                    checkComplete();
                };
                document.head.appendChild(script2);
                
                // Load documentEditor.js
                const script3 = document.createElement('script');
                script3.src = './js/documentEditor.js';
                script3.onload = () => {
                    console.log('documentEditor.js loaded successfully');
                    checkComplete();
                };
                script3.onerror = (e) => {
                    console.error('Failed to load documentEditor.js:', e);
                    checkComplete();
                };
                document.head.appendChild(script3);
                
                // Timeout after 10 seconds
                setTimeout(() => {
                    if (loadedCount < totalScripts) {
                        console.error('Script loading timeout after 10 seconds');
                        resolve(false);
                    }
                }, 10000);
            });
        }

        // Class menu functions
        function toggleClassMenu(event, classIndex) {
            event.stopPropagation();
            
            // Close all other menus
            document.querySelectorAll('.class-menu-dropdown').forEach(menu => {
                if (menu.id !== `class-menu-${classIndex}`) {
                    menu.classList.remove('show');
                }
            });
            
            // Toggle current menu
            const menu = document.getElementById(`class-menu-${classIndex}`);
            if (menu) {
                menu.classList.toggle('show');
            }
        }

        async function editClass(classIndex) {
            try {
                // Get classes from Firebase
                const db = window.firebase.firestore();
                const classesRef = db.collection('users').doc(currentUser.uid).collection('classes');
                const querySnapshot = await classesRef.orderBy('createdAt', 'desc').get();
                
                const classes = [];
                querySnapshot.forEach((doc) => {
                    classes.push({
                        id: doc.id,
                        ...doc.data()
                    });
                });
                
                const classToEdit = classes[classIndex];
                
                if (!classToEdit) {
                    console.error('Class not found at index:', classIndex);
                    console.log('Available classes:', classes);
                    return;
                }
                
                // Close menu
                const menu = document.getElementById(`class-menu-${classIndex}`);
                if (menu) {
                    menu.classList.remove('show');
                }
                
                // Show edit modal
                showEditClassModal(classToEdit, classIndex);
            } catch (error) {
                console.error('Error loading classes for edit:', error);
                alert('Error loading class data. Please try again.');
            }
        }

        async function deleteClass(classIndex) {
            try {
                // Get classes from Firebase
                const db = window.firebase.firestore();
                const classesRef = db.collection('users').doc(currentUser.uid).collection('classes');
                const querySnapshot = await classesRef.orderBy('createdAt', 'desc').get();
                
                const classes = [];
                querySnapshot.forEach((doc) => {
                    classes.push({
                        id: doc.id,
                        ...doc.data()
                    });
                });
                
                const classToDelete = classes[classIndex];
                
                if (!classToDelete) {
                    console.error('Class not found at index:', classIndex);
                    console.log('Available classes:', classes);
                    return;
                }
                
                // Close menu
                const menu = document.getElementById(`class-menu-${classIndex}`);
                if (menu) {
                    menu.classList.remove('show');
                }
                
                // Confirm deletion
                if (confirm(`Are you sure you want to delete "${classToDelete.name}"? This action cannot be undone.`)) {
                    // Delete from Firebase
                    await db.collection('users').doc(currentUser.uid).collection('classes').doc(classToDelete.id).delete();
                    
                    console.log('Class deleted successfully from Firebase');
                    
                    // Reload dashboard
                    location.reload();
                }
            } catch (error) {
                console.error('Error deleting class:', error);
                alert('Error deleting class. Please try again.');
            }
        }

        function showEditClassModal(classData, classIndex) {
            // Show class creation form with preloaded data
            showEditClassForm(classData, classIndex);
        }

        function showEditClassForm(classData, classIndex) {
            // Store the class data and index for editing
            window.editingClassData = classData;
            window.editingClassIndex = classIndex;
            
            // Create background overlay
            const overlay = document.createElement('div');
            overlay.className = 'class-form-overlay';
            overlay.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: linear-gradient(135deg, #000000, #1a1a1a);
                z-index: 9999;
                backdrop-filter: blur(20px);
            `;
            
            // Create the class form with preloaded data
            const formContainer = document.createElement('div');
            formContainer.className = 'class-form-container';
            formContainer.innerHTML = `
                <div class="form-column">
                    <div class="form-header-custom">
                        <button type="button" class="back-btn-custom" id="backBtnCustom">
                            <span class="back-icon">‚Üê</span> <span class="back-text">Back</span>
                        </button>
                    </div>
                    <div class="form-section">
                        <h2>Edit Class Information</h2>
                        
                        <div class="form-group">
                            <label for="classImage">Class Image</label>
                            <div class="image-upload-area" onclick="document.getElementById('classImage').click()">
                                <input type="file" id="classImage" accept="image/*" style="display: none;">
                                <div class="image-preview" id="imagePreview">
                                    ${classData.imageUrl ? 
                                        `<img src="${classData.imageUrl}" alt="Class Image" style="width: 100%; height: 100%; object-fit: cover; border-radius: 8px;">` :
                                        `<span>üì∑</span><p>Click to upload image</p>`
                                    }
                                </div>
                            </div>
                        </div>
                        
                        <div class="form-group">
                            <label for="className">Class Name *</label>
                            <input type="text" id="className" placeholder="Enter class name" value="${classData.name || ''}" required>
                        </div>
                        
                        <div class="form-row">
                            <div class="form-group">
                                <label for="classInstructor">Instructor</label>
                                <input type="text" id="classInstructor" placeholder="Instructor name" value="${classData.instructor || ''}">
                            </div>
                            <div class="form-group">
                                <label for="classLevel">Level *</label>
                                <select id="classLevel" required>
                                    <option value="">Select level</option>
                                    <option value="Regular" ${classData.level === 'Regular' ? 'selected' : ''}>Regular</option>
                                    <option value="College Prep" ${classData.level === 'College Prep' ? 'selected' : ''}>College Prep</option>
                                    <option value="Honors" ${classData.level === 'Honors' ? 'selected' : ''}>Honors</option>
                                    <option value="AP" ${classData.level === 'AP' ? 'selected' : ''}>AP</option>
                                    <option value="IB" ${classData.level === 'IB' ? 'selected' : ''}>IB</option>
                                    <option value="Advanced" ${classData.level === 'Advanced' ? 'selected' : ''}>Advanced</option>
                                    <option value="Graduate" ${classData.level === 'Graduate' ? 'selected' : ''}>Graduate</option>
                                </select>
                            </div>
                        </div>
                        
                        <div class="form-row">
                            <div class="form-group">
                                <label for="classTerm">Term *</label>
                                <select id="classTerm" required>
                                    <option value="">Select term</option>
                                    <option value="Fall" ${classData.term === 'Fall' ? 'selected' : ''}>Fall</option>
                                    <option value="Spring" ${classData.term === 'Spring' ? 'selected' : ''}>Spring</option>
                                    <option value="Winter" ${classData.term === 'Winter' ? 'selected' : ''}>Winter</option>
                                    <option value="Summer" ${classData.term === 'Summer' ? 'selected' : ''}>Summer</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="classYear">Year *</label>
                                <input type="number" id="classYear" placeholder="2025" min="2024" max="2030" value="${classData.year || new Date().getFullYear()}" required>
                            </div>
                        </div>
                        
                        <div class="form-group">
                            <label for="classRoom">Room/Location</label>
                            <input type="text" id="classRoom" placeholder="e.g., Room 101, Online" value="${classData.room || ''}">
                        </div>
                    </div>
                    
                    <div class="form-section">
                        <h2>Schedule</h2>
                        <p>Select the days and times for this class</p>
                        
                        <div class="days-container">
                            <div class="day-item" data-day="Monday">
                                <input type="checkbox" id="monday" class="day-checkbox" value="Monday" ${classData.schedule && classData.schedule.Monday ? 'checked' : ''}>
                                <label for="monday" class="day-label">Monday</label>
                                <div class="day-times">
                                    <input type="text" class="day-start-time" placeholder="9:00 AM" value="${classData.schedule && classData.schedule.Monday ? classData.schedule.Monday.start : ''}">
                                    <input type="text" class="day-end-time" placeholder="10:30 AM" value="${classData.schedule && classData.schedule.Monday ? classData.schedule.Monday.end : ''}">
                                </div>
                            </div>
                            
                            <div class="day-item" data-day="Tuesday">
                                <input type="checkbox" id="tuesday" class="day-checkbox" value="Tuesday" ${classData.schedule && classData.schedule.Tuesday ? 'checked' : ''}>
                                <label for="tuesday" class="day-label">Tuesday</label>
                                <div class="day-times">
                                    <input type="text" class="day-start-time" placeholder="9:00 AM" value="${classData.schedule && classData.schedule.Tuesday ? classData.schedule.Tuesday.start : ''}">
                                    <input type="text" class="day-end-time" placeholder="10:30 AM" value="${classData.schedule && classData.schedule.Tuesday ? classData.schedule.Tuesday.end : ''}">
                                </div>
                            </div>
                            
                            <div class="day-item" data-day="Wednesday">
                                <input type="checkbox" id="wednesday" class="day-checkbox" value="Wednesday" ${classData.schedule && classData.schedule.Wednesday ? 'checked' : ''}>
                                <label for="wednesday" class="day-label">Wednesday</label>
                                <div class="day-times">
                                    <input type="text" class="day-start-time" placeholder="9:00 AM" value="${classData.schedule && classData.schedule.Wednesday ? classData.schedule.Wednesday.start : ''}">
                                    <input type="text" class="day-end-time" placeholder="10:30 AM" value="${classData.schedule && classData.schedule.Wednesday ? classData.schedule.Wednesday.end : ''}">
                                </div>
                            </div>
                            
                            <div class="day-item" data-day="Thursday">
                                <input type="checkbox" id="thursday" class="day-checkbox" value="Thursday" ${classData.schedule && classData.schedule.Thursday ? 'checked' : ''}>
                                <label for="thursday" class="day-label">Thursday</label>
                                <div class="day-times">
                                    <input type="text" class="day-start-time" placeholder="9:00 AM" value="${classData.schedule && classData.schedule.Thursday ? classData.schedule.Thursday.start : ''}">
                                    <input type="text" class="day-end-time" placeholder="10:30 AM" value="${classData.schedule && classData.schedule.Thursday ? classData.schedule.Thursday.end : ''}">
                                </div>
                            </div>
                            
                            <div class="day-item" data-day="Friday">
                                <input type="checkbox" id="friday" class="day-checkbox" value="Friday" ${classData.schedule && classData.schedule.Friday ? 'checked' : ''}>
                                <label for="friday" class="day-label">Friday</label>
                                <div class="day-times">
                                    <input type="text" class="day-start-time" placeholder="9:00 AM" value="${classData.schedule && classData.schedule.Friday ? classData.schedule.Friday.start : ''}">
                                    <input type="text" class="day-end-time" placeholder="10:30 AM" value="${classData.schedule && classData.schedule.Friday ? classData.schedule.Friday.end : ''}">
                                </div>
                            </div>
                            
                            <div class="day-item" data-day="Saturday">
                                <input type="checkbox" id="saturday" class="day-checkbox" value="Saturday" ${classData.schedule && classData.schedule.Saturday ? 'checked' : ''}>
                                <label for="saturday" class="day-label">Saturday</label>
                                <div class="day-times">
                                    <input type="text" class="day-start-time" placeholder="9:00 AM" value="${classData.schedule && classData.schedule.Saturday ? classData.schedule.Saturday.start : ''}">
                                    <input type="text" class="day-end-time" placeholder="10:30 AM" value="${classData.schedule && classData.schedule.Saturday ? classData.schedule.Saturday.end : ''}">
                                </div>
                            </div>
                            
                            <div class="day-item" data-day="Sunday">
                                <input type="checkbox" id="sunday" class="day-checkbox" value="Sunday" ${classData.schedule && classData.schedule.Sunday ? 'checked' : ''}>
                                <label for="sunday" class="day-label">Sunday</label>
                                <div class="day-times">
                                    <input type="text" class="day-start-time" placeholder="9:00 AM" value="${classData.schedule && classData.schedule.Sunday ? classData.schedule.Sunday.start : ''}">
                                    <input type="text" class="day-end-time" placeholder="10:30 AM" value="${classData.schedule && classData.schedule.Sunday ? classData.schedule.Sunday.end : ''}">
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="form-section">
                        <h2>Additional Information</h2>
                        
                        <div class="form-group">
                            <label for="classMaterials">Materials Needed</label>
                            <textarea id="classMaterials" placeholder="List any materials, textbooks, or supplies needed for this class" rows="3">${classData.materials || ''}</textarea>
                        </div>
                        
                        <div class="form-group">
                            <label for="classDescription">Description</label>
                            <textarea id="classDescription" placeholder="Brief description of the class" rows="3">${classData.description || ''}</textarea>
                        </div>
                    </div>
                    
                    <div class="form-actions">
                        <button type="button" class="btn-secondary" id="cancelBtn">Cancel</button>
                        <button type="button" class="btn-primary" id="createBtn">Update Class</button>
                    </div>
                </div>
                
                <div class="preview-section">
                    <div class="class-preview">
                        <div class="preview-image" id="previewImage">
                            ${classData.imageUrl ? 
                                `<img src="${classData.imageUrl}" alt="Class Image" style="width: 100%; height: 100%; object-fit: cover; border-radius: 8px;">` :
                                `<span>üì∑</span>`
                            }
                        </div>
                        <div class="preview-content">
                            <h3 class="preview-title" id="previewTitle">${classData.name || 'Untitled'}</h3>
                            <p class="preview-instructor" id="previewInstructor" style="${classData.instructor ? '' : 'display: none;'}">${classData.instructor || ''}</p>
                            <div class="preview-meta">
                                <span id="previewTerm" style="${classData.term ? '' : 'display: none;'}">${classData.term || ''}</span>
                                <span id="previewLevel" style="${classData.level ? '' : 'display: none;'}">${classData.level || ''}</span>
                                <span id="previewDays" style="display: none;"></span>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            
            // Set proper z-index for form container
            formContainer.style.zIndex = '10000';
            
            // Append overlay first, then form
            document.body.appendChild(overlay);
            document.body.appendChild(formContainer);
            
            // Setup event listeners
            setupEditClassFormListeners();
            
            // Setup live preview
            setupEditClassPreview();
        }

        function setupEditClassFormListeners() {
            // Back button
            const backBtn = document.getElementById('backBtnCustom');
            if (backBtn) {
                backBtn.addEventListener('click', () => {
                    closeEditClassForm();
                });
            }
            
            // Cancel button
            const cancelBtn = document.getElementById('cancelBtn');
            if (cancelBtn) {
                cancelBtn.addEventListener('click', () => {
                    closeEditClassForm();
                });
            }
            
            // Update button (instead of create)
            const updateBtn = document.getElementById('createBtn');
            if (updateBtn) {
                updateBtn.addEventListener('click', updateClass);
            }
            
            // Image upload
            const imageInput = document.getElementById('classImage');
            if (imageInput) {
                imageInput.addEventListener('change', handleImageUpload);
            }
        }

        async function updateClass() {
            try {
                // Get form values
                const name = document.getElementById('className').value.trim();
                const instructor = document.getElementById('classInstructor').value.trim();
                const level = document.getElementById('classLevel').value;
                const term = document.getElementById('classTerm').value;
                const year = parseInt(document.getElementById('classYear').value);
                const room = document.getElementById('classRoom').value.trim();
                const materials = document.getElementById('classMaterials').value.trim();
                const description = document.getElementById('classDescription').value.trim();
                
                // Validate required fields
                if (!name) {
                    alert('Please enter a class name');
                    return;
                }
                if (!level) {
                    alert('Please select a level');
                    return;
                }
                if (!term) {
                    alert('Please select a term');
                    return;
                }
                if (!year) {
                    alert('Please enter a year');
                    return;
                }
                
                // Collect schedule data
                const schedule = {};
                const dayItems = document.querySelectorAll('.day-item');
                dayItems.forEach(dayItem => {
                    const checkbox = dayItem.querySelector('.day-checkbox');
                    const startTime = dayItem.querySelector('.day-start-time').value.trim();
                    const endTime = dayItem.querySelector('.day-end-time').value.trim();
                    
                    if (checkbox.checked && startTime && endTime) {
                        schedule[checkbox.value] = {
                            start: startTime,
                            end: endTime
                        };
                    }
                });
                
                // Get image URL
                const imageUrl = window.uploadedImageUrl || window.editingClassData.imageUrl || null;
                
                // Update class in Firebase
                const db = window.firebase.firestore();
                await db.collection('users').doc(currentUser.uid).collection('classes').doc(window.editingClassData.id).update({
                    name: name,
                    instructor: instructor,
                    level: level,
                    term: term,
                    year: year,
                    room: room,
                    materials: materials,
                    description: description,
                    schedule: schedule,
                    imageUrl: imageUrl,
                    updatedAt: new Date()
                });
                
                // Close form
                closeEditClassForm();
                
                // Reload classes
                setTimeout(() => {
                    window.location.reload();
                }, 100);
                
            } catch (error) {
                console.error('Error updating class:', error);
                alert('Error updating class. Please try again.');
            }
        }

        function closeEditClassModal() {
            const modal = document.querySelector('.edit-class-modal').closest('.modal-overlay');
            if (modal) {
                modal.remove();
            }
        }

        function handleImageUpload(event) {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = (e) => {
                    const imageUrl = e.target.result;
                    window.uploadedImageUrl = imageUrl;
                    
                    // Update the image preview
                    const imagePreview = document.getElementById('imagePreview');
                    if (imagePreview) {
                        imagePreview.innerHTML = `<img src="${imageUrl}" alt="Class Image" style="width: 100%; height: 100%; object-fit: cover; border-radius: 8px;">`;
                    }
                };
                reader.readAsDataURL(file);
            }
        }

        function closeEditClassForm() {
            // Remove overlay
            const overlay = document.querySelector('.class-form-overlay');
            if (overlay) {
                overlay.remove();
            }
            
            // Remove form container
            const formContainer = document.querySelector('.class-form-container');
            if (formContainer) {
                formContainer.remove();
            }
        }

        function setupEditClassPreview() {
            // Get form elements
            const className = document.getElementById('className');
            const classInstructor = document.getElementById('classInstructor');
            const classLevel = document.getElementById('classLevel');
            const classTerm = document.getElementById('classTerm');
            const classImage = document.getElementById('classImage');
            
            // Get preview elements
            const previewTitle = document.getElementById('previewTitle');
            const previewInstructor = document.getElementById('previewInstructor');
            const previewLevel = document.getElementById('previewLevel');
            const previewTerm = document.getElementById('previewTerm');
            const previewImage = document.getElementById('previewImage');
            
            // Update preview on input changes
            if (className && previewTitle) {
                className.addEventListener('input', () => {
                    previewTitle.textContent = className.value || 'Untitled';
                });
            }
            
            if (classInstructor && previewInstructor) {
                classInstructor.addEventListener('input', () => {
                    if (classInstructor.value.trim()) {
                        previewInstructor.textContent = classInstructor.value;
                        previewInstructor.style.display = 'block';
                    } else {
                        previewInstructor.style.display = 'none';
                    }
                });
            }
            
            if (classLevel && previewLevel) {
                classLevel.addEventListener('change', () => {
                    if (classLevel.value) {
                        previewLevel.textContent = classLevel.value;
                        previewLevel.style.display = 'inline';
                    } else {
                        previewLevel.style.display = 'none';
                    }
                });
            }
            
            if (classTerm && previewTerm) {
                classTerm.addEventListener('change', () => {
                    if (classTerm.value) {
                        previewTerm.textContent = classTerm.value;
                        previewTerm.style.display = 'inline';
                    } else {
                        previewTerm.style.display = 'none';
                    }
                });
            }
            
            if (classImage && previewImage) {
                classImage.addEventListener('change', (e) => {
                    const file = e.target.files[0];
                    if (file) {
                        const reader = new FileReader();
                        reader.onload = (e) => {
                            previewImage.innerHTML = `<img src="${e.target.result}" alt="Class Image" style="width: 100%; height: 100%; object-fit: cover; border-radius: 8px;">`;
                        };
                        reader.readAsDataURL(file);
                    }
                });
            }
        }

        async function saveEditedClass(classIndex) {
            try {
                // Get classes from Firebase
                const db = window.firebase.firestore();
                const classesRef = db.collection('users').doc(currentUser.uid).collection('classes');
                const querySnapshot = await classesRef.orderBy('createdAt', 'desc').get();
                
                const classes = [];
                querySnapshot.forEach((doc) => {
                    classes.push({
                        id: doc.id,
                        ...doc.data()
                    });
                });
                
                const classToEdit = classes[classIndex];
                
                if (!classToEdit) {
                    console.error('Class not found at index:', classIndex);
                    console.log('Available classes:', classes);
                    return;
                }
                
                // Get form values
                const name = document.getElementById('editClassName').value.trim();
                const instructor = document.getElementById('editClassInstructor').value.trim();
                const term = document.getElementById('editClassTerm').value;
                const year = parseInt(document.getElementById('editClassYear').value);
                const level = document.getElementById('editClassLevel').value;
                
                if (!name) {
                    alert('Please enter a class name');
                    return;
                }
                
                // Update class data in Firebase
                await db.collection('users').doc(currentUser.uid).collection('classes').doc(classToEdit.id).update({
                    name: name,
                    instructor: instructor,
                    term: term,
                    year: year,
                    level: level,
                    updatedAt: new Date()
                });
                
                console.log('Class updated successfully in Firebase');
                
                // Close modal
                closeEditClassModal();
                
                // Reload dashboard
                location.reload();
            } catch (error) {
                console.error('Error updating class:', error);
                alert('Error updating class. Please try again.');
            }
        }

        // Close menus when clicking outside
        document.addEventListener('click', (e) => {
            if (!e.target.closest('.class-menu-container')) {
                document.querySelectorAll('.class-menu-dropdown').forEach(menu => {
                    menu.classList.remove('show');
                });
            }
        });

    </script>
    
    <!-- Import Configuration -->
    <script src="js/config.js"></script>
    
    <!-- Import Firebase Services -->
    <script src="js/firebase-service.js"></script>
    <script src="js/csharp-flashcard-service.js"></script>
    
    <!-- Import Math.js for scientific calculations -->
    <script src="https://unpkg.com/mathjs@11.11.0/lib/browser/math.min.js"></script>
    
    <!-- Import Genius Chat Module -->
    <script type="module" src="js/geniusChat.js"></script>
</body>
</html>

